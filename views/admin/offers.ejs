<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offer Management Dashboard</title>
        
    <link rel="stylesheet" href="/css/adminDashboard.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
            background-color: #f8f9fa;
        }
        .header1 {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .search-container {
            position: relative;
            max-width: 300px;
            flex: 1;
        }
        .search-input {
            background-color: #7db87d;
            border: none;
            border-radius: 5px;
            color: #000000;
            padding: 12px 15px 12px 40px;
            width: 100%;
            font-size: 14px;
        }
        .search-input::placeholder {
            color: #000000;
        }
        .search-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #000000;
        }
        .dropdown select {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
            background-color: #fff;
            cursor: pointer;
            width: 120px;
        }
        .btn-primary {
            background-color: #7db87d;
            color: #000000;
            border: none;
            padding: 10px 20px;
            font-weight: 600;
            transition: background-color 0.3s;
        }
        .btn-primary:hover {
            background-color: #6da16d;
            color: #000000;
        }
        .main-container {
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        th {
            background-color: #7db87d !important;
            color: #fff;
            padding: 20px !important;
        }
        .action-btn {
            background: none;
            border: none;
            cursor: pointer;
            padding: 5px;
            margin: 0 5px;
        }
        .modal-content {
            background-color: #fff;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
        }
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.9em;
            margin-top: 5px;
        }
        .btn-loading .spinner-border {
            display: inline-block;
        }
        .btn-loading .btn-text {
            display: none;
        }
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            table {
                display: block;
                overflow-x: auto;
            }
        }
    </style>
</head>
<body>
    <%- include('../../views/partials/admin/header') %>

    <div class="header1">
        <div class="search-container">
            <i class="fas fa-search search-icon"></i>
            <input type="text" placeholder="Search offers..." class="search-input" id="searchInput" value="<%= search || '' %>">
        </div>
        <div class="dropdown">
            <select id="sortSelect" class="form-select">
                <option value="newest" <%= sort === 'newest' ? 'selected' : '' %>>Newest</option>
                <option value="oldest" <%= sort === 'oldest' ? 'selected' : '' %>>Oldest</option>
                <option value="a-z" <%= sort === 'a-z' ? 'selected' : '' %>>A-Z</option>
                <option value="z-a" <%= sort === 'z-a' ? 'selected' : '' %>>Z-A</option>
            </select>
        </div>
        <button class="btn btn-primary" id="addOfferBtn">Add New Offer</button>
    </div>

    <div class="main-container">
        <% if (offers && offers.length > 0) { %>
            <table class="table">
                <thead>
                    <tr>
                        <th>Offer Name</th>
                        <th>Description</th>
                        <th>Discount (%)</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Offer Type</th>
                        <th>Applicable To</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="offersTableBody">
                    <% offers.forEach(offer => { %>
                        <tr>
                            <td><%= offer.offerName || 'N/A' %></td>
                            <td><%= offer.description || 'N/A' %></td>
                            <td><%= offer.discount ? offer.discount + '%' : 'N/A' %></td>
                            <td><%= offer.startDate ? new Date(offer.startDate).toLocaleDateString() : 'N/A' %></td>
                            <td><%= offer.endDate ? new Date(offer.endDate).toLocaleDateString() : 'N/A' %></td>
                            <td><%= offer.offerType ? offer.offerType.charAt(0).toUpperCase() + offer.offerType.slice(1) : 'N/A' %></td>
                            <td><%= offer.targetId ? (offer.targetId.name || offer.targetId.brandName || offer.targetId.productName || 'N/A') : 'N/A' %></td>
                            <td>
                                <span class="badge <%= offer.status === 'Active' ? 'bg-success' : offer.status === 'Expired' ? 'bg-warning' : 'bg-danger' %>">
                                    <%= offer.status || 'N/A' %>
                                </span>
                            </td>
                            <td>
                                <button class="action-btn edit-btn" data-id="<%= offer._id %>">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <% if (offer.status === 'Disabled') { %>
                                    <button class="action-btn enable-btn" data-id="<%= offer._id %>">
                                        <i class="fas fa-check-circle"></i>
                                    </button>
                                <% } else { %>
                                    <button class="action-btn disable-btn" data-id="<%= offer._id %>">
                                        <i class="fas fa-ban"></i>
                                    </button>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        <% } else { %>
            <p class="text-center">No offers found.</p>
        <% } %>


    <!-- Add Offer Modal -->
    <div id="addOfferModal" class="modal fade" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Offer</h5>
                    <button type="button" class="btn-close" id="closeAddModal"></button>
                </div>
                <form id="addOfferForm">
                    <div class="modal-body">
                        <div class="form-grid">
                            <div class="form-group">
                                <label for="OfferName">Offer Name</label>
                                <input type="text" class="form-control" id="OfferName" name="offerName">
                                <div id="NameError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="Description">Description</label>
                                <textarea class="form-control" id="Description" name="description"></textarea>
                                <div id="DescriptionError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="Discount">Discount Percentage</label>
                                <input type="number" class="form-control" id="Discount" name="discount" min="1" max="100">
                                <div id="DiscountError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="StartDate">Start Date</label>
                                <input type="date" class="form-control" id="StartDate" name="startDate">
                                <div id="StartDateError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="EndDate">End Date</label>
                                <input type="date" class="form-control" id="EndDate" name="endDate">
                                <div id="EndDateError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="OfferType">Offer Type</label>
                                <select class="form-select" id="OfferType" name="offerType">
                                    <option value="" disabled selected>Select offer type</option>
                                    <option value="product">Product</option>
                                    <option value="category">Category</option>
                                    <option value="brand">Brand</option>
                                </select>
                                <div id="OfferTypeError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="ItemSelect">Applicable To</label>
                                <select class="form-select" id="ItemSelect" name="itemSelect">
                                    <option value="" disabled selected>Select applicable item</option>
                                </select>
                                <div id="ItemSelectError" class="error-message"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" id="addOfferSubmitBtn">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="btn-text">Add Offer</span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Offer Modal -->
    <div id="editOfferModal" class="modal fade" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Offer</h5>
                    <button type="button" class="btn-close" id="closeEditModal"></button>
                </div>
                <form id="editOfferForm">
                    <div class="modal-body">
                        <input type="hidden" id="eofferId" name="eofferId">
                        <div class="form-grid">
                            <div class="form-group">
                                <label for="eofferName">Offer Name</label>
                                <input type="text" class="form-control" id="eofferName" name="eofferName">
                                <div id="editNameError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="edescription">Description</label>
                                <textarea class="form-control" id="edescription" name="edescription"></textarea>
                                <div id="editDescriptionError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="ediscount">Discount Percentage</label>
                                <input type="number" class="form-control" id="ediscount" name="ediscount" min="1" max="100">
                                <div id="editDiscountError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="estartDate">Start Date</label>
                                <input type="date" class="form-control" id="estartDate" name="estartDate">
                                <div id="editStartDateError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="eendDate">End Date</label>
                                <input type="date" class="form-control" id="eendDate" name="eendDate">
                                <div id="editEndDateError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="eofferType">Offer Type</label>
                                <select class="form-select" id="eofferType" name="eofferType">
                                    <option value="" disabled>Select offer type</option>
                                    <option value="product">Product</option>
                                    <option value="category">Category</option>
                                    <option value="brand">Brand</option>
                                </select>
                                <div id="editOfferTypeError" class="error-message"></div>
                            </div>
                            <div class="form-group">
                                <label for="eitemSelect">Applicable To</label>
                                <select class="form-select" id="eitemSelect" name="eitemSelect">
                                    <option value="" disabled selected>Select applicable item</option>
                                </select>
                                <div id="editItemSelectError" class="error-message"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" id="editOfferSubmitBtn">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="btn-text">Update Offer</span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <%- include('../../views/partials/admin/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM Elements
            const addOfferBtn = document.getElementById('addOfferBtn');
            const addOfferModal = new bootstrap.Modal(document.getElementById('addOfferModal'));
            const editOfferModal = new bootstrap.Modal(document.getElementById('editOfferModal'));
            const addOfferForm = document.getElementById('addOfferForm');
            const editOfferForm = document.getElementById('editOfferForm');
            const searchInput = document.getElementById('searchInput');
            const sortSelect = document.getElementById('sortSelect');

            // Utility Functions
            const showError = (id, message) => {
                const el = document.getElementById(id);
                if (el) {
                    el.textContent = message;
                    el.style.display = 'block';
                }
            };

            const clearErrors = (form) => {
                form.querySelectorAll('.error-message').forEach(el => {
                    el.textContent = '';
                    el.style.display = 'none';
                });
            };

            const setButtonLoading = (button, text) => {
                button.classList.add('btn-loading');
                button.disabled = true;
                button.querySelector('.btn-text').textContent = text;
            };

            const resetButton = (button, text) => {
                button.classList.remove('btn-loading');
                button.disabled = false;
                button.querySelector('.btn-text').textContent = text;
            };

            const validateForm = (form, prefix = '') => {
                clearErrors(form);
                let isValid = true;

                const fields = {
                    offerName: { id: `${prefix}OfferName`, errorId: `${prefix}NameError`, min: 3, max: 100 },
                    description: { id: `${prefix}Description`, errorId: `${prefix}DescriptionError`, min: 10, max: 500 },
                    discount: { id: `${prefix}Discount`, errorId: `${prefix}DiscountError`, min: 1, max: 100 },
                    startDate: { id: `${prefix}StartDate`, errorId: `${prefix}StartDateError` },
                    endDate: { id: `${prefix}EndDate`, errorId: `${prefix}EndDateError` },
                    offerType: { id: `${prefix}OfferType`, errorId: `${prefix}OfferTypeError` },
                    itemSelect: { id: `${prefix}ItemSelect`, errorId: `${prefix}ItemSelectError` },
                };

                const values = {};
                for (const [key, { id, errorId, min, max }] of Object.entries(fields)) {
                    const element = form.querySelector(`#${id}`);
                    if (!element) {
                        console.error(`Element with ID ${id} not found`);
                        continue;
                    }
                    const value = element.value.trim();
                    values[key] = value;

                    if (!value) {
                        showError(errorId, `${key.replace(/([A-Z])/g, ' $1').trim()} is required`);
                        isValid = false;
                    } else if (min && value.length < min) {
                        showError(errorId, `${key.replace(/([A-Z])/g, ' $1').trim()} must be at least ${min} characters`);
                        isValid = false;
                    } else if (max && value.length > max) {
                        showError(errorId, `${key.replace(/([A-Z])/g, ' $1').trim()} cannot exceed ${max} characters`);
                        isValid = false;
                    }
                }

                if (values.discount && (isNaN(values.discount) || values.discount < 1 || values.discount > 100)) {
                    showError(fields.discount.errorId, 'Discount must be between 1 and 100');
                    isValid = false;
                }

                if (values.startDate && values.endDate && new Date(values.startDate) >= new Date(values.endDate)) {
                    showError(fields.endDate.errorId, 'End date must be after start date');
                    isValid = false;
                }

                return isValid;
            };

            const updateApplicableItems = async (selectId, offerType) => {
                const select = document.getElementById(selectId);
                if (!select) {
                    console.error(`Select element with ID ${selectId} not found`);
                    return;
                }
                select.innerHTML = '<option value="" disabled selected>Select applicable item</option>';
                try {
                    const response = await fetch(`/admin/${offerType || 'category'}`);
                    if (!response.ok) throw new Error(`Failed to fetch ${offerType} items`);
                    const items = await response.json();
                    items.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item._id;
                        option.textContent = item.productName || item.name || item.brandName || 'N/A';
                        select.appendChild(option);
                    });
                } catch (error) {
                    console.error(`Error fetching ${offerType} items:`, error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: `Failed to load ${offerType} options`,
                    });
                }
            };

            // Event Listeners
            addOfferBtn.addEventListener('click', () => {
                addOfferForm.reset();
                clearErrors(addOfferForm);
                const today = new Date();
                const futureDate = new Date();
                futureDate.setDate(today.getDate() + 30);
                document.getElementById('StartDate').value = today.toISOString().split('T')[0];
                document.getElementById('EndDate').value = futureDate.toISOString().split('T')[0];
                updateApplicableItems('ItemSelect', 'category');
                addOfferModal.show();
            });

            addOfferForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (!validateForm(addOfferForm)) return;

                setButtonLoading(document.getElementById('addOfferSubmitBtn'), 'Adding...');
                const formData = new FormData(addOfferForm);
                const data = Object.fromEntries(formData);

                try {
                    const response = await fetch('/admin/offers', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data),
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message,
                            timer: 1500,
                        }).then(() => window.location.reload());
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Failed to add offer',
                        });
                    }
                } catch (error) {
                    console.error('Add offer error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Network error, please try again',
                    });
                } finally {
                    resetButton(document.getElementById('addOfferSubmitBtn'), 'Add Offer');
                }
            });

            editOfferForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (!validateForm(editOfferForm, 'e')) return;

                setButtonLoading(document.getElementById('editOfferSubmitBtn'), 'Updating...');
                const formData = new FormData(editOfferForm);
                const data = Object.fromEntries(formData);

                try {
                    const response = await fetch('/admin/offers/edit', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data),
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message,
                            timer: 1500,
                        }).then(() => window.location.reload());
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Failed to update offer',
                        });
                    }
                } catch (error) {
                    console.error('Edit offer error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Network error, please try again',
                    });
                } finally {
                    resetButton(document.getElementById('editOfferSubmitBtn'), 'Update Offer');
                }
            });

            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const id = btn.dataset.id;
                    try {
                        const response = await fetch(`/admin/offers/${id}`);
                        if (!response.ok) throw new Error('Failed to fetch offer');
                        const offer = await response.json();
                        if (!offer._id) throw new Error('Invalid offer data');
                        document.getElementById('eofferId').value = offer._id;
                        document.getElementById('eofferName').value = offer.offerName || '';
                        document.getElementById('edescription').value = offer.description || '';
                        document.getElementById('ediscount').value = offer.discount || '';
                        document.getElementById('estartDate').value = offer.startDate ? new Date(offer.startDate).toISOString().split('T')[0] : '';
                        document.getElementById('eendDate').value = offer.endDate ? new Date(offer.endDate).toISOString().split('T')[0] : '';
                        document.getElementById('eofferType').value = offer.offerType || '';
                        await updateApplicableItems('eitemSelect', offer.offerType);
                        document.getElementById('eitemSelect').value = offer.targetId?._id || '';
                        editOfferModal.show();
                    } catch (error) {
                        console.error('Fetch offer error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to load offer details',
                        });
                    }
                });
            });

            document.querySelectorAll('.disable-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const id = btn.dataset.id;
                    const result = await Swal.fire({
                        title: 'Disable Offer',
                        text: 'Are you sure you want to disable this offer?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, disable it!',
                        cancelButtonText: 'Cancel',
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch('/admin/offers/disable', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ offerId: id }),
                            });
                            const result = await response.json();
                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: result.message,
                                    timer: 1500,
                                }).then(() => window.location.reload());
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: result.message || 'Failed to disable offer',
                                });
                            }
                        } catch (error) {
                            console.error('Disable offer error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Network error, please try again',
                            });
                        }
                    }
                });
            });

            document.querySelectorAll('.enable-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const id = btn.dataset.id;
                    const result = await Swal.fire({
                        title: 'Enable Offer',
                        text: 'Are you sure you want to enable this offer?',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, enable it!',
                        cancelButtonText: 'Cancel',
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch('/admin/offers/enable', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ offerId: id }),
                            });
                            const result = await response.json();
                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: result.message,
                                    timer: 1500,
                                }).then(() => window.location.reload());
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: result.message || 'Failed to enable offer',
                                });
                            }
                        } catch (error) {
                            console.error('Enable offer error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Network error, please try again',
                            });
                        }
                    }
                });
            });

            document.getElementById('OfferType').addEventListener('change', (e) => {
                updateApplicableItems('ItemSelect', e.target.value);
            });

            document.getElementById('eofferType').addEventListener('change', (e) => {
                updateApplicableItems('eitemSelect', e.target.value);
            });

            searchInput.addEventListener('input', () => {
                const query = searchInput.value.toLowerCase();
                document.querySelectorAll('#offersTableBody tr').forEach(row => {
                    row.style.display = row.textContent.toLowerCase().includes(query) ? '' : 'none';
                });
            });

            sortSelect.addEventListener('change', () => {
                window.location.href = `/admin/offers?page=1&search=${encodeURIComponent(searchInput.value || '')}&sort=${sortSelect.value}`;
            });
        });
    </script>
</body>
</html>