<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Admin Panel</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.css">
    <link rel="stylesheet" href="/css/adminDashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
            background-color: #f9f9f9;
        }
        .header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .search-bar {
            flex-grow: 1;
            max-width: 600px;
            margin-right: 10px;
        }
        input[type="text"], select, textarea, input[type="number"] {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 100%;
        }
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        .btn-primary {
            background-color: #7db87d;
            color: rgb(0, 0, 0);
        }
        .btn-primary:hover {
            background-color: #000000 !important;
        }
        .header1 {
            justify-self: end;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        th {
            background-color: #7db87d;
            color: rgb(0, 0, 0);
            text-align: left;
            padding: 12px;
        }
        td {
            padding: 12px;
            border-bottom: 2px solid white;
            background-color: #d3d3d3;
            font-weight: 600;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .product-image {
            width: 50px;
            height: 50px;
            object-fit: contain;
            background-color: #f9f9f9;
        }
        .action-btn {
            padding: 5px;
            margin-right: 5px;
            cursor: pointer;
            background: none;
            border: none;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            overflow: auto;
        }
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 800px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: relative;
        }
        .close-btn {
            float: right;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        .image-upload {
            border: 2px dashed #ccc;
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            position: relative;
        }
        .thumbnail-container {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }
        .thumbnail {
            position: relative;
            width: 80px;
            height: 80px;
        }
        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .remove-image {
            position: absolute;
            top: -5px;
            right: -5px;
            background: red;
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            cursor: pointer;
            font-size: 12px;
            line-height: 20px;
            text-align: center;
        }
        .variant {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }
        .variant input {
            flex: 1;
            min-width: 100px;
        }
        .remove-variant {
            background: #d33;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }
        .add-variant-btn {
            background: #7db87d;
            color: black;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
        }
        .add-btn-container {
            text-align: center;
            margin-top: 20px;
        }
        .error-message {
            color: red;
            font-size: 0.8em;
            margin-top: 5px;
            display: none;
        }
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            table {
                display: block;
                overflow-x: auto;
            }
            .variant {
                flex-direction: column;
            }
        }
        .search-user-section {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-top: 30px;
            padding-right: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .search-container {
            position: relative;
            margin-right: 15px;
            flex: 1;
            max-width: 300px;
            min-width: 200px;
        }
        .search-input {
            background-color: #7db87d;
            border: none;
            border-radius: 5px;
            color: rgb(0, 0, 0);
            padding: 12px 15px 12px 35px;
            width: 100%;
            font-size: 14px;
            box-sizing: border-box;
        }
        .search-input::placeholder {
            color: black;
        }
        .dropdown {
            padding: 8px 12px;
            border-radius: 4px;
            background-color: white;
            cursor: pointer;
            width: 120px;
            margin-left: 10px;
        }
        .dropdown select {
            border: none;
            background: transparent;
            width: 100%;
            cursor: pointer;
            font-weight: 500;
            outline: none;
        }
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }
        .loading-overlay .spinner-border {
            width: 3rem;
            height: 3rem;
            color: #7db87d;
        }
        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
        .action-btn {
            background: none;
            border: none;
            cursor: pointer;
            padding: 5px;
            margin: 0 5px;
            color: #333;
            transition: color 0.3s ease;
        }
        .edit-btn svg, .delete-btn svg {
            vertical-align: middle;
        }
        /* Crop Modal Styles */
        .crop-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            overflow: auto;
        }
        .crop-modal-content {
            background-color: #7db87d;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: relative;
            text-align: center;
        }
        .crop-container {
            max-width: 100%;
            max-height: 400px;
            margin-bottom: 20px;
        }
        .crop-container img {
            max-width: 100%;
            height: auto;
        }
        .crop-btn-container {
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        .crop-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        .crop-btn-confirm {
            background-color: black;
            color: white;
        }
        .crop-btn-cancel {
            background-color: rgb(255, 0, 0);
            color: white;
        }
        .mainCantainer {
            padding: 40px;
        }
    </style>
</head>
<body>
    <%- include('../../views/partials/admin/header') %>
    
    <div class="search-user-section">
        <div class="search-container">
            <input type="text" placeholder="Search..." class="search-input" id="searchInput">
        </div>
        <div class="dropdown">
            <select class="custom-select" id="sortSelect">
                <option value="newest">Newest</option>
                <option value="oldest">Oldest</option>
                <option value="a-z">A-Z</option>
                <option value="z-a">Z-A</option>
            </select>
        </div>
    </div>
    
    <div class="header1">
        <button class="btn btn-primary" id="addProductBtn">ADD NEW PRODUCT</button>
    </div>

<div class="mainCantainer">
    <table>
        <thead>
            <tr>
                <th>PRODUCT IMAGE</th>
                <th>PRODUCT NAME</th>
                <th>CATEGORY</th>
                <th>STOCK</th>
                <th>PRICE</th>
                <th>SALE PRICE</th>
                <th>AVAILABLE VARIANTS</th>
                <th>STATUS</th>
                <th>ACTION</th>
            </tr>
        </thead>
        <tbody>
            <% products.forEach(product =>{%>  
                <tr>
                    <td> 
                        <img src="<%= product.productImage && product.productImage.length > 0 ? product.productImage[0] : '/api/placeholder/50/50' %>" alt="<%= product.productName %>" class="product-image">
                    </td>
                    <td><%= product.productName %></td>
                    <td><%= product.productCategory?.name || '-' %></td>
                    <td><%= product.variants.reduce((sum, v) => sum + v.quantity, 0) %></td>
                    <td><%= product.variants[0].regularPrice %> ₹</td>
                    <td><%= product.variants[0].salePrice ? product.variants[0].salePrice + ' ₹' : '-' %></td>
                    <td><%= product.variants.map(v => v.size).join(', ') %></td>
                    <td><%= product.status %></td>
                    <td>
                        <button class="action-btn edit-btn" data-id="<%= product._id %>">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                            </svg>
                        </button>
                        <button class="action-btn delete-btn" data-id="<%= product._id %>">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="3 6 5 6 21 6"></polyline>
                                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                <line x1="10" y1="11" x2="10" y2="17"></line>
                                <line x1="14" y1="11" x2="14" y2="17"></line>
                            </svg>
                        </button>
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>
</div>

    
    <!-- Add Product Modal -->
    <div id="addProductModal" class="modal">
        <div class="modal-content">
            <div class="loading-overlay d-none" id="addProductLoadingOverlay">
                <div class="spinner-border text-success" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <span class="close-btn" id="closeAddModal">×</span>
            <h2>Add New Product</h2>
            <form id="addProductForm" enctype="multipart/form-data">
                <div class="form-grid">
                    <div>
                        <div class="image-upload" id="addImageUpload">
                            <span>+ Add Images</span>
                            <input type="file" id="addProductImage" name="images" multiple accept="image/jpeg,image/png,image/gif" style="display:none">
                        </div>
                        <div id="addImagePreview" class="thumbnail-container"></div>
                        <div id="addImageError" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label for="status">Status</label>
                        <select id="status" name="status">
                            <option value="" selected disabled>Select status</option>
                            <option value="listed">Listed</option>
                            <option value="unlisted">Unlisted</option>
                        </select>
                        <div id="statusError" class="error-message"></div>
                    </div>
                    <div>
                        <div class="form-group">
                            <label for="productName">Product Name</label>
                            <input type="text" id="productName" name="productName">
                            <div id="nameError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="productBrand">Product Brand</label>
                            <select id="productBrand" name="productBrand">
                                <option value="" selected disabled>Select brand</option>
                                <% brand.forEach(b => { %>
                                    <option value="<%= b._id %>"><%= b.brandName %></option>
                                <% }) %>
                            </select>
                            <div id="brandError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="productCategory">Product Category</label>
                            <select id="productCategory" name="productCategory">
                                <option value="" selected disabled>Select category</option>
                                <% cat.forEach(c => { %>
                                    <option value="<%= c._id %>"><%= c.name %></option>
                                <% }) %>
                            </select>
                            <div id="categoryError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label>Variants</label>
                            <div id="addVariantsContainer">
                                <div class="variant">
                                    <input type="text" name="variantSize" placeholder="Size" class="variant-size">
                                    <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price">
                                    <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price">
                                    <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity">
                                    <button type="button" class="remove-variant">Remove</button>
                                </div>
                            </div>
                            <button type="button" class="add-variant-btn" id="addVariant">Add Variant</button>
                            <div id="variantError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="productDescription">Product Description</label>
                            <textarea id="productDescription" name="productDescription" rows="10"></textarea>
                            <div id="descriptionError" class="error-message"></div>
                        </div>
                    </div>
                </div>
                <div class="add-btn-container">
                    <button type="submit" class="btn btn-primary" id="addProductSubmitBtn">ADD</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div id="editProductModal" class="modal">
        <div class="modal-content">
            <div class="loading-overlay d-none" id="editProductLoadingOverlay">
                <div class="spinner-border text-success" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <span class="close-btn" id="closeEditModal">×</span>
            <h2>Edit Product</h2>
            <form id="editProductForm" enctype="multipart/form-data">
                <input type="hidden" id="editProductId" name="productId">
                <div class="form-grid">
                    <div>
                        <div class="image-upload" id="editImageUpload">
                            <span>+ Add Images</span>
                            <input type="file" id="editProductImage" name="images" multiple accept="image/jpeg,image/png" style="display:none">
                        </div>
                        <div id="editImagePreview" class="thumbnail-container"></div>
                        <input type="hidden" id="removedImages" name="removedImages" value="">
                        <div id="editImageError" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label for="editStatus">Status</label>
                        <select id="editStatus" name="status">
                            <option value="" selected disabled>Select status</option>
                            <option value="listed">Listed</option>
                            <option value="unlisted">Unlisted</option>
                        </select>
                        <div id="editStatusError" class="error-message"></div>
                    </div>
                    <div>
                        <div class="form-group">
                            <label for="editProductName">Product Name</label>
                            <input type="text" id="editProductName" name="productName">
                            <div id="editNameError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="editProductBrand">Product Brand</label>
                            <select id="editProductBrand" name="productBrand">
                                <option value="" selected disabled>Select brand</option>
                                <% brand.forEach(b => { %>
                                    <option value="<%= b._id %>"><%= b.brandName %></option>
                                <% }) %>
                            </select>
                            <div id="editBrandError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="editProductCategory">Product Category</label>
                            <select id="editProductCategory" name="productCategory">
                                <option value="" selected disabled>Select category</option>
                                <% cat.forEach(c => { %>
                                    <option value="<%= c._id %>"><%= c.name %></option>
                                <% }) %>
                            </select>
                            <div id="editCategoryError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label>Variants</label>
                            <div id="editVariantsContainer"></div>
                            <button type="button" class="add-variant-btn" id="editAddVariant">Add Variant</button>
                            <div id="editVariantError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="editProductDescription">Product Description</label>
                            <textarea id="editProductDescription" name="productDescription" rows="10"></textarea>
                            <div id="editDescriptionError" class="error-message"></div>
                        </div>
                    </div>
                </div>
                <div class="add-btn-container">
                    <button type="submit" class="btn btn-primary" id="editProductSubmitBtn">UPDATE</button>
                </div>
            </form>
        </div>
    </div>

    <div id="cropModal" class="crop-modal">
        <div class="crop-modal-content">
            <span class="close-btn" id="closeCropModal">×</span>
            <h2>CROP IMAGE</h2>
            <div class="crop-container">
                <img id="cropImage" src="" alt="Image to crop">
            </div>
            <div class="crop-btn-container">
                <button class="crop-btn crop-btn-confirm" id="cropConfirm">Crop & Save</button>
                <button class="crop-btn crop-btn-cancel" id="cropCancel">Cancel</button>
            </div>
        </div>
    </div>
    
    <%- include('../../views/partials/admin/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.js"></script>
    <script>
        const addProductBtn = document.getElementById('addProductBtn');
        const addProductModal = document.getElementById('addProductModal');
        const closeAddModal = document.getElementById('closeAddModal');
        const addImageUpload = document.getElementById('addImageUpload');
        const addProductImage = document.getElementById('addProductImage');
        const addImagePreview = document.getElementById('addImagePreview');
        const addProductForm = document.getElementById('addProductForm');
        const addVariantBtn = document.getElementById('addVariant');
        const addVariantsContainer = document.getElementById('addVariantsContainer');
        
        const editProductModal = document.getElementById('editProductModal');
        const closeEditModal = document.getElementById('closeEditModal');
        const editImageUpload = document.getElementById('editImageUpload');
        const editProductImage = document.getElementById('editProductImage');
        const editImagePreview = document.getElementById('editImagePreview');
        const editProductForm = document.getElementById('editProductForm');
        const editVariantBtn = document.getElementById('editAddVariant');
        const editVariantsContainer = document.getElementById('editVariantsContainer');
        const removedImagesInput = document.getElementById('removedImages');
        
        const cropModal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        const cropConfirm = document.getElementById('cropConfirm');
        const cropCancel = document.getElementById('cropCancel');
        const closeCropModal = document.getElementById('closeCropModal');
        
        let cropper = null;
        let currentFiles = [];
        let croppedBlobs = [];
        let currentInput = null;
        let currentPreview = null;
        
        addProductBtn.addEventListener('click', () => {
            addProductModal.style.display = 'block';
        });
        
        closeAddModal.addEventListener('click', () => {
            addProductModal.style.display = 'none';
            addProductForm.reset();
            clearProductErrorMessages(addProductForm);
            addImagePreview.innerHTML = '';
            resetVariants(addVariantsContainer);
            croppedBlobs = [];
        });
        
        window.addEventListener('click', (event) => {
            if (event.target === addProductModal) {
                addProductModal.style.display = 'none';
                addProductForm.reset();
                clearProductErrorMessages(addProductForm);
                addImagePreview.innerHTML = '';
                resetVariants(addVariantsContainer);
                croppedBlobs = [];
            } else if (event.target === editProductModal) {
                editProductModal.style.display = 'none';
                editProductForm.reset();
                clearProductErrorMessages(editProductForm);
                editImagePreview.innerHTML = '';
                resetVariants(editVariantsContainer);
                removedImagesInput.value = '';
                croppedBlobs = [];
            } else if (event.target === cropModal) {
                closeCropModalFunction();
            }
        });

        closeEditModal.addEventListener('click', () => {
            editProductModal.style.display = 'none';
            editProductForm.reset();
            clearProductErrorMessages(editProductForm);
            editImagePreview.innerHTML = '';
            resetVariants(editVariantsContainer);
            removedImagesInput.value = '';
            croppedBlobs = [];
        });
        
        closeCropModal.addEventListener('click', closeCropModalFunction);
        
        function closeCropModalFunction() {
            cropModal.style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            cropImage.src = '';
            currentFiles = [];
            currentInput = null;
            currentPreview = null;
        }
        
        function resetVariants(container) {
            container.innerHTML = '';
            for (let i = 0; i < 5; i++) {
                const variantDiv = document.createElement('div');
                variantDiv.className = 'variant';
                variantDiv.innerHTML = `
                    <input type="text" name="variantSize" placeholder="Size (e.g., 50 ML)" class="variant-size">
                    <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price">
                    <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price">
                    <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity">
                    ${i === 0 ? '' : '<button type="button" class="remove-variant">Remove</button>'}
                `;
                container.appendChild(variantDiv);
            }
        }
        
        addImageUpload.addEventListener('click', () => {
            addProductImage.click();
        });
        
        editImageUpload.addEventListener('click', () => {
            editProductImage.click();
        });
        
        function handleImageChange(input, preview) {
            input.addEventListener('change', async function(event) {
                const files = Array.from(event.target.files);
                const currentImages = preview.querySelectorAll('.thumbnail').length;
                const newImagesCount = files.length;
                if (currentImages + newImagesCount > 4) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Image Limit Exceeded',
                        text: 'You can upload a maximum of 4 images.'
                    });
                    return;
                }
        
                currentFiles = files;
                currentInput = input;
                currentPreview = preview;
        
                if (files.length > 0) {
                    await processNextImage(0);
                }
            });
        }
        
        async function processNextImage(index) {
            if (index >= currentFiles.length) {
                currentFiles = [];
                return;
            }
        
            const file = currentFiles[index];
            const reader = new FileReader();
            reader.onload = function(e) {
                cropImage.src = e.target.result;
                cropModal.style.display = 'block';
        
                cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 0.8,
                    responsive: true,
                    zoomable: true,
                    scalable: true,
                    movable: true,
                    background: false,
                    guides: true
                });
        
                cropConfirm.onclick = async () => {
                    const canvas = cropper.getCroppedCanvas({
                        width: 300,
                        height: 300,
                        imageSmoothingQuality: 'high'
                    });
        
                    canvas.toBlob(blob => {
                        const url = URL.createObjectURL(blob);
                        const div = document.createElement('div');
                        div.className = 'thumbnail';
                        div.innerHTML = `
                            <img src="${url}" alt="Product Image">
                            <button type="button" class="remove-image">×</button>
                        `;
                        currentPreview.appendChild(div);
        
                        croppedBlobs.push({ blob, name: file.name });
        
                        const dataTransfer = new DataTransfer();
                        croppedBlobs.forEach(item => dataTransfer.items.add(new File([item.blob], item.name, { type: item.blob.type })));
                        currentInput.files = dataTransfer.files;
        
                        cropper.destroy();
                        cropper = null;
                        cropImage.src = '';
                        cropModal.style.display = 'none';
        
                        processNextImage(index + 1);
                    }, 'image/jpeg', 0.8);
                };
        
                cropCancel.onclick = () => {
                    closeCropModalFunction();
                    processNextImage(index + 1);
                };
            };
            reader.readAsDataURL(file);
        }
        
        handleImageChange(addProductImage, addImagePreview);
        handleImageChange(editProductImage, editImagePreview);
        
        function handleImageRemoval(preview, removedImagesInput) {
            preview.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-image')) {
                    const thumbnail = e.target.parentElement;
                    const url = thumbnail.querySelector('img').getAttribute('data-url');
                    if (url) {
                        const currentRemoved = removedImagesInput.value ? removedImagesInput.value.split(',') : [];
                        currentRemoved.push(url);
                        removedImagesInput.value = currentRemoved.join(',');
                    }
                    const src = thumbnail.querySelector('img').src;
                    croppedBlobs = croppedBlobs.filter(blob => URL.createObjectURL(blob.blob) !== src);
                    thumbnail.remove();
        
                    const dataTransfer = new DataTransfer();
                    croppedBlobs.forEach(item => dataTransfer.items.add(new File([item.blob], item.name, { type: item.blob.type })));
                    currentInput.files = dataTransfer.files;
                }
            });
        }
        
        handleImageRemoval(addImagePreview, { value: '' });
        handleImageRemoval(editImagePreview, removedImagesInput);
        
        function addVariantHandler(btn, container) {
            btn.addEventListener('click', () => {
                const variants = container.querySelectorAll('.variant').length;
                if (variants >= 5) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Variant Limit',
                        text: 'You can only add exactly 5 variants.'
                    });
                    return;
                }
                const variantDiv = document.createElement('div');
                variantDiv.className = 'variant';
                variantDiv.innerHTML = `
                    <input type="text" name="variantSize" placeholder="Size (e.g., 50 ML)" class="variant-size">
                    <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price">
                    <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price">
                    <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity">
                    <button type="button" class="remove-variant">Remove</button>
                `;
                container.appendChild(variantDiv);
            });
        }
        
        addVariantHandler(addVariantBtn, addVariantsContainer);
        addVariantHandler(editVariantBtn, editVariantsContainer);
        
        function removeVariantHandler(container) {
            container.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-variant')) {
                    const variants = container.querySelectorAll('.variant');
                    if (variants.length > 1) {
                        e.target.parentElement.remove();
                    } else {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Cannot Remove',
                            text: 'At least one variant is required.'
                        });
                    }
                }
            });
        }
        
        removeVariantHandler(addVariantsContainer);
        removeVariantHandler(editVariantsContainer);
        
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', async () => {
                const productId = button.dataset.id;
                try {
                    const response = await fetch(`/admin/getProduct/${productId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                        }
                    });
                    const product = await response.json();
        
                    if (product.success) {
                        document.getElementById('editProductId').value = product.data._id;
                        document.getElementById('editProductName').value = product.data.productName;
                        document.getElementById('editProductDescription').value = product.data.productDescription;
                        document.getElementById('editStatus').value = product.data.status;
                        document.getElementById('editProductBrand').value = product.data.productBrand._id;
                        document.getElementById('editProductCategory').value = product.data.productCategory._id;
        
                        editImagePreview.innerHTML = '';
                        if (product.data.productImage && product.data.productImage.length) {
                            product.data.productImage.forEach(img => {
                                const div = document.createElement('div');
                                div.className = 'thumbnail';
                                div.innerHTML = `
                                    <img src="${img}" alt="Product Image" data-url="${img}">
                                    <button type="button" class="remove-image">×</button>
                                    <input type="hidden" name="existingImages" value="${img}">
                                `;
                                editImagePreview.appendChild(div);
                            });
                        }
        
                        editVariantsContainer.innerHTML = '';
                        const variants = product.data.variants || [];
                        for (let i = 0; i < variants.length; i++) {
                            const variant = variants[i] || {};
                            const variantDiv = document.createElement('div');
                            variantDiv.className = 'variant';
                            variantDiv.innerHTML = `
                                <input type="text" name="variantSize" placeholder="Size (e.g., 50 ML)" class="variant-size" value="${variant.size || ''}">
                                <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price" value="${variant.regularPrice || ''}">
                                <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price" value="${variant.salePrice || ''}">
                                <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity" value="${variant.quantity || ''}">
                                ${i === 0 ? '' : '<button type="button" class="remove-variant">Remove</button>'}
                            `;
                            editVariantsContainer.appendChild(variantDiv);
                        }
        
                        editProductModal.style.display = 'block';
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: product.message || 'Failed to load product data'
                        });
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to load product data'
                    });
                }
            });
        });
        
        function validateProductForm(form, isEdit = false) {
            clearProductErrorMessages(form);
        
            const name = form.querySelector(isEdit ? '#editProductName' : '#productName').value.trim();
            const brand = form.querySelector(isEdit ? '#editProductBrand' : '#productBrand').value.trim();
            const category = form.querySelector(isEdit ? '#editProductCategory' : '#productCategory').value.trim();
            const description = form.querySelector(isEdit ? '#editProductDescription' : '#productDescription').value.trim();
            const status = form.querySelector(isEdit ? '#editStatus' : '#status').value.trim();
            const variants = Array.from(form.querySelectorAll('.variant')).map(variant => ({
                size: variant.querySelector('.variant-size').value.trim(),
                regularPrice: variant.querySelector('.variant-regular-price').value.trim(),
                salePrice: variant.querySelector('.variant-sale-price').value.trim(),
                quantity: variant.querySelector('.variant-quantity').value.trim()
            }));
            const images = form.querySelectorAll(isEdit ? '#editImagePreview .thumbnail' : '#addImagePreview .thumbnail').length;
        
            let isValid = true;
        
            if (!name) {
                displayProductErrorMessage(form, isEdit ? 'editNameError' : 'nameError', 'Product name is required');
                isValid = false;
            }
            if (!brand) {
                displayProductErrorMessage(form, isEdit ? 'editBrandError' : 'brandError', 'Brand is required');
                isValid = false;
            }
            if (!category) {
                displayProductErrorMessage(form, isEdit ? 'editCategoryError' : 'categoryError', 'Category is required');
                isValid = false;
            }
            if (!description) {
                displayProductErrorMessage(form, isEdit ? 'editDescriptionError' : 'descriptionError', 'Description is required');
                isValid = false;
            }
            if (!status) {
                displayProductErrorMessage(form, isEdit ? 'editStatusError' : 'statusError', 'Status is required');
                isValid = false;
            }
        
            if (images < 3) {
                displayProductErrorMessage(form, isEdit ? 'editImageError' : 'addImageError', 'At least 3 images are required');
                isValid = false;
            }
            if (images > 4) {
                displayProductErrorMessage(form, isEdit ? 'editImageError' : 'addImageError', 'Maximum of 4 images allowed');
                isValid = false;
            }
        
            if (variants.length > 5) {
                displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', 'Maximum 5 variants are allowed');
                isValid = false;
            }
            variants.forEach((variant, index) => {
                if (!variant.size) {
                    displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', `Variant ${index + 1}: Size is required`);
                    isValid = false;
                }
                if (!variant.regularPrice) {
                    displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', `Variant ${index + 1}: Regular price is required`);
                    isValid = false;
                } else if (isNaN(variant.regularPrice) || parseFloat(variant.regularPrice) <= 0) {
                    displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', `Variant ${index + 1}: Regular price must be positive`);
                    isValid = false;
                }
                if (variant.salePrice && (isNaN(variant.salePrice) || parseFloat(variant.salePrice) < 0)) {
                    displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', `Variant ${index + 1}: Sale price must be non-negative`);
                    isValid = false;
                }
                if (variant.salePrice && parseFloat(variant.salePrice) >= parseFloat(variant.regularPrice)) {
                    displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', `Variant ${index + 1}: Sale price must be less than regular price`);
                    isValid = false;
                }
                if (!variant.quantity) {
                    displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', `Variant ${index + 1}: Quantity is required`);
                    isValid = false;
                } else if (isNaN(variant.quantity) || parseInt(variant.quantity) < 0) {
                    displayProductErrorMessage(form, isEdit ? 'editVariantError' : 'variantError', `Variant ${index + 1}: Quantity must be non-negative`);
                    isValid = false;
                }
            });
        
            if (!isValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill all fields correctly'
                });
            }
        
            return isValid;
        }
        
        let isAddProductSubmitting = false;
        addProductForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (isAddProductSubmitting) return;
            isAddProductSubmitting = true;
            const submitButton = document.getElementById('addProductSubmitBtn');
            const loadingOverlay = document.getElementById('addProductLoadingOverlay');
            submitButton.disabled = true;
            loadingOverlay.classList.remove('d-none');
        
            if (validateProductForm(addProductForm)) {
                const formData = new FormData(addProductForm);
                const variants = Array.from(addVariantsContainer.querySelectorAll('.variant')).map(variant => ({
                    size: variant.querySelector('.variant-size').value.trim(),
                    regularPrice: variant.querySelector('.variant-regular-price').value.trim(),
                    salePrice: variant.querySelector('.variant-sale-price').value.trim(),
                    quantity: variant.querySelector('.variant-quantity').value.trim()
                }));
                formData.append('variants', JSON.stringify(variants));
        
                try {
                    const response = await fetch('/admin/addProduct', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                        }
                    });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message,
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to add product'
                    });
                } finally {
                    isAddProductSubmitting = false;
                    submitButton.disabled = false;
                    loadingOverlay.classList.add('d-none');
                }
            } else {
                isAddProductSubmitting = false;
                submitButton.disabled = false;
                loadingOverlay.classList.add('d-none');
            }
        });
        
        let isEditProductSubmitting = false;
        editProductForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (isEditProductSubmitting) return;
            isEditProductSubmitting = true;
            const submitButton = document.getElementById('editProductSubmitBtn');
            const loadingOverlay = document.getElementById('editProductLoadingOverlay');
            submitButton.disabled = true;
            loadingOverlay.classList.remove('d-none');
        
            if (validateProductForm(editProductForm, true)) {
                const formData = new FormData(editProductForm);
                const variants = Array.from(editVariantsContainer.querySelectorAll('.variant')).map(variant => ({
                    size: variant.querySelector('.variant-size').value.trim(),
                    regularPrice: variant.querySelector('.variant-regular-price').value.trim(),
                    salePrice: variant.querySelector('.variant-sale-price').value.trim(),
                    quantity: variant.querySelector('.variant-quantity').value.trim()
                }));
                formData.append('variants', JSON.stringify(variants));
        
                try {
                    const response = await fetch('/admin/editProduct', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                        }
                    });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message,
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to update product'
                    });
                } finally {
                    isEditProductSubmitting = false;
                    submitButton.disabled = false;
                    loadingOverlay.classList.add('d-none');
                }
            } else {
                isEditProductSubmitting = false;
                submitButton.disabled = false;
                loadingOverlay.classList.add('d-none');
            }
        });
        
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', async () => {
                const productId = button.getAttribute('data-id');
                await deleteProduct(productId);
            });
        });
        
        async function deleteProduct(productId) {
            const confirmDelete = await Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to delete this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            });
        
            if (confirmDelete.isConfirmed) {
                try {
                    const response = await fetch(`/admin/deleteProduct/${productId}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                        }
                    });
                    const result = await response.json();
        
                    if (result.success) {
                        await Swal.fire('Deleted!', 'The product was deleted successfully.', 'success');
                        location.reload();
                    } else {
                        Swal.fire('Error!', result.message || 'Something went wrong.', 'error');
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    Swal.fire('Error!', 'Failed to delete product', 'error');
                }
            }
        }
        
        const searchInput = document.getElementById('searchInput');
        const sortSelect = document.getElementById('sortSelect');
        
        async function fetchProducts(search = '', sort = 'newest') {
            try {
                const response = await fetch(`/admin/products?search=${encodeURIComponent(search)}&sort=${sort}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                    }
                });
                const data = await response.text();
                document.querySelector('tbody').innerHTML = new DOMParser()
                    .parseFromString(data, 'text/html')
                    .querySelector('tbody').innerHTML;
            } catch (error) {
                console.error('Error fetching products:', error);
            }
        }
        
        searchInput.addEventListener('input', () => {
            fetchProducts(searchInput.value, sortSelect.value);
        });
        
        sortSelect.addEventListener('change', () => {
            fetchProducts(searchInput.value, sortSelect.value);
        });
        
        function displayProductErrorMessage(form, elementId, message) {
            let errorElement = form.querySelector(`#${elementId}`);
            if (!errorElement) {
                errorElement = document.createElement('div');
                errorElement.id = elementId;
                errorElement.className = 'error-message';
                const parent = form.querySelector(`#${elementId.replace('Error', '')}`)?.parentNode;
                if (parent) {
                    parent.appendChild(errorElement);
                } else {
                    form.querySelector('.form-group').appendChild(errorElement);
                }
            }
            errorElement.innerHTML = message;
            errorElement.style.display = 'block';
        }
        
        function clearProductErrorMessages(form) {
            const errorElements = form.querySelectorAll('.error-message');
            errorElements.forEach(element => {
                element.innerHTML = '';
                element.style.display = 'none';
            });
        }
    </script>
</body>
</html>