<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Admin Panel</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.css">
    <link rel="stylesheet" href="/css/adminDashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f9f9f9;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 0 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .search-bar {
            flex-grow: 1;
            max-width: 600px;
            margin-right: 10px;
        }
        
        input[type="text"], select, textarea, input[type="number"] {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 100%;
        }
        
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        
        .btn-primary {
            background-color: #7db87d;
            color: rgb(0, 0, 0);
        }
        
        .btn-primary:hover {
            background-color: #000000 !important;
        }
        .header1 {
            justify-self: end;
            padding: 20px;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        th {
            background-color: #7db87d;
            color: rgb(0, 0, 0);
            text-align: left;
            padding: 12px;
        }
        
        td {
            padding: 12px;
            border-bottom: 2px solid white;
            background-color: #d3d3d3;
            font-weight: 600;
        }
        
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        
        .product-image {
            width: 50px;
            height: 50px;
            object-fit: contain;
            background-color: #f9f9f9;
        }
        
        .action-btn {
            padding: 5px;
            margin-right: 5px;
            cursor: pointer;
            background: none;
            border: none;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            overflow: auto;
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 800px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        
        .close-btn {
            float: right;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .image-upload {
            border: 2px dashed #ccc;
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            position: relative;
        }
        
        .thumbnail-container {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }
        
        .thumbnail {
            position: relative;
            width: 80px;
            height: 80px;
        }
        
        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        
        .remove-image {
            position: absolute;
            top: -5px;
            right: -5px;
            background: red;
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            cursor: pointer;
            font-size: 12px;
            line-height: 20px;
            text-align: center;
        }
        
        .variant {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }
        
        .variant input {
            flex: 1;
            min-width: 100px;
        }
        
        .remove-variant {
            background: #d33;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .add-variant-btn {
            background: #7db87d;
            color: black;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
        }
        
        .add-btn-container {
            text-align: center;
            margin-top: 20px;
        }
        
        .error-message {
            color: red;
            font-size: 0.8em;
            margin-top: 5px;
            display: none;
        }
        
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            table {
                display: block;
                overflow-x: auto;
            }
            
            .variant {
                flex-direction: column;
            }
        }
        
        .search-user-section {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-top: 30px;
            padding-right: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }

        .search-container {
            position: relative;
            margin-right: 15px;
            flex: 1;
            max-width: 300px;
            min-width: 200px;
        }

        .search-input {
            background-color: #7db87d;
            border: none;
            border-radius: 5px;
            color: rgb(0, 0, 0);
            padding: 12px 15px 12px 35px;
            width: 100%;
            font-size: 14px;
            box-sizing: border-box;
        }

        .search-input::placeholder {
            color: black;
        }

        .dropdown {
            padding: 8px 12px;
            border-radius: 4px;
            background-color: white;
            cursor: pointer;
            width: 120px;
            margin-left: 10px;
        }

        .dropdown select {
            border: none;
            background: transparent;
            width: 100%;
            cursor: pointer;
            font-weight: 500;
            outline: none;
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/header') %>
    
    <div class="search-user-section">
        <div class="search-container">
            <input type="text" placeholder="Search..." class="search-input" id="searchInput">
        </div>
        <div class="dropdown">
            <select class="custom-select" id="sortSelect">
                <option value="newest">Newest</option>
                <option value="oldest">Oldest</option>
                <option value="a-z">A-Z</option>
                <option value="z-a">Z-A</option>
            </select>
        </div>
    </div>
    
    <div class="header1">
        <button class="btn btn-primary" id="addProductBtn">ADD NEW PRODUCT</button>
    </div>
    
    <table>
        <thead>
            <tr>
                <th>PRODUCT IMAGE</th>
                <th>PRODUCT NAME</th>
                <th>CATEGORY</th>
                <th>STOCK</th>
                <th>PRICE</th>
                <th>SALE PRICE</th>
                <th>AVAILABLE VARIANTS</th>
                <th>STATUS</th>
                <th>ACTION</th>
            </tr>
        </thead>
        <tbody>
            <% products.forEach(product => { %>
                <tr>
                    <td>
                        <img src="<%= product.productImage && product.productImage.length > 0 ? product.productImage[0] : '/api/placeholder/50/50' %>" alt="<%= product.productName %>" class="product-image">
                    </td>
                    <td><%= product.productName %></td>
                    <td><%= product.productCategory.name %></td>
                    <td><%= product.variants.reduce((sum, v) => sum + v.quantity, 0) %></td>
                    <td><%= product.variants[0].regularPrice %> ₹</td>
                    <td><%= product.variants[0].salePrice ? product.variants[0].salePrice + ' ₹' : '-' %></td>
                    <td><%= product.variants.map(v => v.size).join(', ') %></td>
                    <td><%= product.status %></td>
                    <td>
                        <a href="/admin/editProduct?id=<%= product._id %>" class="action-btn edit-btn">✏️</a>
                        <a href="/admin/deleteProduct?id=<%= product._id %>" class="action-btn delete-btn" onclick="return confirm('Are you sure you want to delete this product?')">🗑️</a>
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>
    
    <!-- Add Product Modal -->
    <div id="addProductModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" id="closeModal">×</span>
            <h2>Add New Product</h2>
            <form id="addProductForm" enctype="multipart/form-data">
                <div class="form-grid">
                    <div>
                        <div class="image-upload" id="mainImageUpload">
                            <span>+ Add Images</span>
                            <input type="file" id="productImage" name="productImage" multiple accept="image/jpeg,image/png,image/gif" style="display:none">
                        </div>
                        <div id="imagePreview" class="thumbnail-container"></div>
                        <div id="imageError" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label for="status">Status</label>
                        <select id="status" name="status">
                            <option value="" selected disabled>Select status</option>
                            <option value="listed">Listed</option>
                            <option value="unlisted">Unlisted</option>
                        </select>
                        <div id="statusError" class="error-message"></div>
                    </div>
                    <div>
                        <div class="form-group">
                            <label for="productName">Product Name</label>
                            <input type="text" id="productName" name="productName">
                            <div id="nameError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="productBrand">Product Brand</label>
                            <select id="productBrand" name="productBrand">
                                <option value="" selected disabled>Select brand</option>
                                <% brand.forEach(b => { %>
                                    <option value="<%= b._id %>"><%= b.brandName %></option>
                                <% }) %>
                            </select>
                            <div id="brandError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="productCategory">Product Category</label>
                            <select id="productCategory" name="productCategory">
                                <option value="" selected disabled>Select category</option>
                                <% cat.forEach(c => { %>
                                    <option value="<%= c._id %>"><%= c.name %></option>
                                <% }) %>
                            </select>
                            <div id="categoryError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label>Variants</label>
                            <div id="variantsContainer">
                                <div class="variant">
                                    <input type="text" name="variantSize" placeholder="Size (e.g., 50 ML)" class="variant-size">
                                    <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price">
                                    <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price">
                                    <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity">
                                    <button type="button" class="remove-variant">Remove</button>
                                </div>
                            </div>
                            <button type="button" class="add-variant-btn" id="addVariant">Add Variant</button>
                            <div id="variantError" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="productDescription">Product Description</label>
                            <textarea id="productDescription" name="productDescription" rows="10"></textarea>
                            <div id="descriptionError" class="error-message"></div>
                        </div>
                    </div>
                </div>
                <div class="add-btn-container">
                    <button type="submit" class="btn btn-primary">ADD</button>
                </div>
            </form>
        </div>
    </div>

    <%- include('../partials/admin/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.js"></script>
    <script>
        // Get elements
        const addProductBtn = document.getElementById('addProductBtn');
        const addProductModal = document.getElementById('addProductModal');
        const closeModal = document.getElementById('closeModal');
        const mainImageUpload = document.getElementById('mainImageUpload');
        const productImageInput = document.getElementById('productImage');
        const imagePreview = document.getElementById('imagePreview');
        const addProductForm = document.getElementById('addProductForm');
        const addVariantBtn = document.getElementById('addVariant');
        const variantsContainer = document.getElementById('variantsContainer');

        // Open add modal
        addProductBtn.addEventListener('click', () => {
            addProductModal.style.display = 'block';
        });

        // Close add modal
        closeModal.addEventListener('click', () => {
            addProductModal.style.display = 'none';
            addProductForm.reset();
            clearProductErrorMessages(addProductForm);
            imagePreview.innerHTML = '';
            variantsContainer.innerHTML = `
                <div class="variant">
                    <input type="text" name="variantSize" placeholder="Size (e.g., 50 ML)" class="variant-size">
                    <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price">
                    <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price">
                    <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity">
                    <button type="button" class="remove-variant">Remove</button>
                </div>
            `;
        });

        // Close add modal if clicked outside
        window.addEventListener('click', (event) => {
            if (event.target === addProductModal) {
                addProductModal.style.display = 'none';
                addProductForm.reset();
                clearProductErrorMessages(addProductForm);
                imagePreview.innerHTML = '';
                variantsContainer.innerHTML = `
                    <div class="variant">
                        <input type="text" name="variantSize" placeholder="Size (e.g., 50 ML)" class="variant-size">
                        <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price">
                        <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price">
                        <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity">
                        <button type="button" class="remove-variant">Remove</button>
                    </div>
                `;
            }
        });

        // Handle image upload click
        mainImageUpload.addEventListener('click', () => {
            productImageInput.click();
        });

        // Handle image preview and removal
        productImageInput.addEventListener('change', function(event) {
            const files = event.target.files;
            for (const file of files) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'thumbnail';
                    div.innerHTML = `
                        <img src="${e.target.result}" alt="Product Image">
                        <button type="button" class="remove-image">×</button>
                    `;
                    imagePreview.appendChild(div);
                };
                reader.readAsDataURL(file);
            }
        });

        imagePreview.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-image')) {
                e.target.parentElement.remove();
            }
        });

        // Handle variant addition
        addVariantBtn.addEventListener('click', () => {
            const variantDiv = document.createElement('div');
            variantDiv.className = 'variant';
            variantDiv.innerHTML = `
                <input type="text" name="variantSize" placeholder="Size (e.g., 50 ML)" class="variant-size">
                <input type="number" name="variantRegularPrice" placeholder="Regular Price" class="variant-regular-price">
                <input type="number" name="variantSalePrice" placeholder="Sale Price (optional)" class="variant-sale-price">
                <input type="number" name="variantQuantity" placeholder="Quantity" class="variant-quantity">
                <button type="button" class="remove-variant">Remove</button>
            `;
            variantsContainer.appendChild(variantDiv);
        });

        // Handle variant removal
        variantsContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-variant')) {
                const variants = variantsContainer.querySelectorAll('.variant');
                if (variants.length > 1) {
                    e.target.parentElement.remove();
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Cannot Remove',
                        text: 'At least one variant is required'
                    });
                }
            }
        });

        // Validation function
        function validateProductForm(form, isEdit = false) {
            clearProductErrorMessages(form);

            const name = form.querySelector(isEdit ? '#editProductName' : '#productName').value.trim();
            const brand = form.querySelector(isEdit ? '#editProductBrand' : '#productBrand').value.trim();
            const category = form.querySelector(isEdit ? '#editProductCategory' : '#productCategory').value.trim();
            const description = form.querySelector(isEdit ? '#editProductDescription' : '#productDescription').value.trim();
            const status = form.querySelector(isEdit ? '#editStatus' : '#status').value.trim();
            const variants = Array.from(form.querySelectorAll('.variant')).map(variant => ({
                size: variant.querySelector('.variant-size').value.trim(),
                regularPrice: variant.querySelector('.variant-regular-price').value.trim(),
                salePrice: variant.querySelector('.variant-sale-price').value.trim(),
                quantity: variant.querySelector('.variant-quantity').value.trim()
            }));
            const images = form.querySelectorAll('#imagePreview .thumbnail').length;

            let isValid = true;

            if (name === '') {
                displayProductErrorMessage(form, isEdit ? 'editNameError' : 'nameError', 'Please enter a product name');
                isValid = false;
            } else if (!/^[a-zA-Z0-9\s&'-]+$/.test(name)) {
                displayProductErrorMessage(form, isEdit ? 'editNameError' : 'nameError', 'Product name can only contain letters, numbers, spaces, &, \', or -');
                isValid = false;
            } else if (name.length < 2 || name.length > 100) {
                displayProductErrorMessage(form, isEdit ? 'editNameError' : 'nameError', 'Product name must be between 2 and 100 characters');
                isValid = false;
            }

            if (brand === '') {
                displayProductErrorMessage(form, isEdit ? 'editBrandError' : 'brandError', 'Please select a brand');
                isValid = false;
            }

            if (category === '') {
                displayProductErrorMessage(form, isEdit ? 'editCategoryError' : 'categoryError', 'Please select a category');
                isValid = false;
            }

            if (description === '') {
                displayProductErrorMessage(form, isEdit ? 'editDescriptionError' : 'descriptionError', 'Please enter a product description');
                isValid = false;
            } else if (description.length < 10 || description.length > 1000) {
                displayProductErrorMessage(form, isEdit ? 'editDescriptionError' : 'descriptionError', 'Description must be between 10 and 1000 characters');
                isValid = false;
            }

            if (status === '') {
                displayProductErrorMessage(form, isEdit ? 'editStatusError' : 'statusError', 'Please select a status');
                isValid = false;
            }

            if (variants.length === 0) {
                displayProductErrorMessage(form, 'variantError', 'At least one variant is required');
                isValid = false;
            } else {
                variants.forEach((variant, index) => {
                    if (!variant.size) {
                        displayProductErrorMessage(form, 'variantError', `Variant ${index + 1}: Size is required`);
                        isValid = false;
                    }
                    if (!variant.regularPrice) {
                        displayProductErrorMessage(form, 'variantError', `Variant ${index + 1}: Regular price is required`);
                        isValid = false;
                    } else if (isNaN(variant.regularPrice) || parseFloat(variant.regularPrice) <= 0) {
                        displayProductErrorMessage(form, 'variantError', `Variant ${index + 1}: Regular price must be a positive number`);
                        isValid = false;
                    }
                    if (variant.salePrice && (isNaN(variant.salePrice) || parseFloat(variant.salePrice) < 0)) {
                        displayProductErrorMessage(form, 'variantError', `Variant ${index + 1}: Sale price must be a non-negative number`);
                        isValid = false;
                    }
                    if (variant.salePrice && parseFloat(variant.salePrice) >= parseFloat(variant.regularPrice)) {
                        displayProductErrorMessage(form, 'variantError', `Variant ${index + 1}: Sale price must be less than regular price`);
                        isValid = false;
                    }
                    if (!variant.quantity) {
                        displayProductErrorMessage(form, 'variantError', `Variant ${index + 1}: Quantity is required`);
                        isValid = false;
                    } else if (isNaN(variant.quantity) || parseInt(variant.quantity) < 0) {
                        displayProductErrorMessage(form, 'variantError', `Variant ${index + 1}: Quantity must be a non-negative integer`);
                        isValid = false;
                    }
                });
            }

            if (!isEdit && images === 0) {
                displayProductErrorMessage(form, 'imageError', 'At least one product image is required');
                isValid = false;
            }

            if (!isValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill all fields correctly'
                });
            }

            return isValid;
        }

        // Handle add form submission
        addProductForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (validateProductForm(addProductForm)) {
                const variants = Array.from(variantsContainer.querySelectorAll('.variant')).map(variant => ({
                    size: variant.querySelector('.variant-size').value.trim(),
                    regularPrice: variant.querySelector('.variant-regular-price').value.trim(),
                    salePrice: variant.querySelector('.variant-sale-price').value.trim(),
                    quantity: variant.querySelector('.variant-quantity').value.trim()
                }));
                const formData = new FormData(addProductForm);
                formData.append('variants', JSON.stringify(variants));

                try {
                    const response = await fetch('/admin/addProduct', {
                        method: 'POST',
                        body: formData
                    });
                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message,
                            timer: 1500
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to add product'
                    });
                }
            }
        });

        // Handle search and sort
        const searchInput = document.getElementById('searchInput');
        const sortSelect = document.getElementById('sortSelect');

        async function fetchProducts(search = '', sort = 'newest') {
            try {
                const response = await fetch(`/admin/products?search=${encodeURIComponent(search)}&sort=${sort}`);
                const data = await response.text(); // Assuming server renders the table body
                document.querySelector('tbody').innerHTML = new DOMParser()
                    .parseFromString(data, 'text/html')
                    .querySelector('tbody').innerHTML;
            } catch (error) {
                console.error('Error fetching products:', error);
            }
        }

        searchInput.addEventListener('input', () => {
            fetchProducts(searchInput.value, sortSelect.value);
        });

        sortSelect.addEventListener('change', () => {
            fetchProducts(searchInput.value, sortSelect.value);
        });

        function displayProductErrorMessage(form, elementId, message) {
            let errorElement = form.querySelector(`#${elementId}`);
            if (!errorElement) {
                errorElement = document.createElement('div');
                errorElement.id = elementId;
                errorElement.className = 'error-message';
                const parent = form.querySelector(`#${elementId.replace('Error', '')}`)?.parentNode;
                if (parent) {
                    parent.appendChild(errorElement);
                } else {
                    form.querySelector('.form-group').appendChild(errorElement);
                }
            }
            errorElement.innerHTML = message;
            errorElement.style.display = 'block';
        }

        function clearProductErrorMessages(form) {
            const errorElements = form.querySelectorAll('.error-message');
            errorElements.forEach(element => {
                element.innerHTML = '';
                element.style.display = 'none';
            });
        }
    </script>
</body>
</html>