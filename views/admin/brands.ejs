<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Brand Management</title>
    <link rel="stylesheet" href="/css/adminDashboard.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/adminBrand.css">
</head>
<body>
    <%- include('../../views/partials/admin/header') %>

    <section class="content-main">
        <div class="content-header">
            <button type="button" class="btn btn-add-brand" data-bs-toggle="modal" data-bs-target="#addBrandModal">
                ADD BRAND
            </button>
        </div>
        
        <table class="table">
            <thead>
                <tr>
                    <th>LOGO</th>
                    <th>BRAND NAME</th>
                    <th>STATUS</th>
                    <th>ACTIONS</th>
                </tr>
            </thead>
            <tbody>
                <% if (data && data.length > 0) { %>
                    <% for(let i = 0; i < data.length; i++) { %>
                        <tr>
                            <td>
                                <div class="d-flex align-items-center justify-content-center" style="width: 40px; height: 40px; border-radius: 50%; overflow: hidden; margin: 0 auto;">
                                    <img src="<%= data[i].brandImage %>" alt="<%= data[i].brandName %>" class="img-fluid rounded-circle" style="width: 100%; height: auto" />
                                </div>
                            </td>
                            <td><%= data[i].brandName %></td>
                            <td>
                                <% if (!data[i].isBlocked) { %>
                                    <span class="badge alert-success">Listed</span>
                                <% } else { %>
                                    <span class="badge alert-danger">Unlisted</span>
                                <% } %>
                            </td>
                            <td class="actions-cell">
                                <i class="fas fa-pencil-alt action-icon edit-icon"
                                   data-id="<%= data[i]._id %>"
                                   data-name="<%= data[i].brandName %>"
                                   data-image="<%= data[i].brandImage %>"
                                   data-status="<%= data[i].isBlocked ? 'unlisted' : 'listed' %>"></i>
                                <i class="fas fa-trash-alt action-icon delete-icon"
                                   data-id="<%= data[i]._id %>"></i>
                            </td>
                        </tr>
                    <% } %>
                <% } else { %>
                    <tr>
                        <td colspan="4" class="text-center">No brands found</td>
                    </tr>
                <% } %>
            </tbody>
        </table>

        <!-- Add Brand modal -->
        <div class="modal fade" id="addBrandModal" tabindex="-1" aria-labelledby="addBrandModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addBrandModalLabel">Add New Brand</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body position-relative">
                        <div class="loading-overlay d-none" id="loadingOverlay">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <form id="addBrandForm" method="post" action="/admin/addBrand" enctype="multipart/form-data">
                            <div class="image-preview-container">
                                <img id="imagePreview" src="" alt="Brand Image Preview" />
                                <div class="image-upload-placeholder" id="uploadPlaceholder">
                                    <i class="fas fa-plus"></i>
                                    <div>Add Brand Image</div>
                                </div>
                                <input
                                    name="image"
                                    id="brandImage"
                                    type="file"
                                    accept="image/*"
                                    class="brand-image-input"
                                />
                            </div>
                            <div class="error-message" id="imageError" style="display: none; color: red; font-size: 12px; text-align: center; margin-bottom: 15px;"></div>
                            
                            <div class="mb-3">
                                <label for="brandName" class="form-label">Brand Name</label>
                                <input
                                    type="text"
                                    name="brandName"
                                    id="brandName"
                                    placeholder="Enter brand name"
                                    class="form-control"
                                    maxlength="100"
                                />
                                <div class="error-message" id="nameError" style="display: none; color: red; font-size: 12px;"></div>
                            </div>
                            
                            <div class="mb-4">
                                <label for="status" class="form-label">Status</label>
                                <select id="status" name="status" class="form-control">
                                    <option value="active">Listed</option>
                                    <option value="inactive">Unlisted</option>
                                </select>
                                <div class="error-message" id="statusError" style="display: none; color: red; font-size: 12px;"></div>
                            </div>
                            
                            <div class="d-grid mt-4">
                                <button class="btn add-btn" type="submit" id="addBrandButton">ADD</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Brand Modal -->
        <div class="modal fade" id="editBrandModal" tabindex="-1" aria-labelledby="editBrandModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editBrandModalLabel">Edit Brand</h5>
                        <button type="button" class="close-button" data-bs-dismiss="modal" aria-label="Close">Ã—</button>
                    </div>
                    <div class="modal-body position-relative">
                        <div class="loading-overlay d-none" id="editLoadingOverlay">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <form id="editBrandForm" class="brand-form" method="post" action="/admin/editBrand" enctype="multipart/form-data">
                            <div class="image-preview-container">
                                <img id="editImagePreview" src="" alt="Brand Image Preview" />
                                <div class="image-upload-placeholder" id="editUploadPlaceholder">
                                    <i class="fas fa-plus"></i>
                                    <div>Update Brand Image</div>
                                </div>
                                <input
                                    name="image"
                                    id="editBrandImage"
                                    type="file"
                                    accept="image/*"
                                    class="brand-image-input"
                                />
                            </div>
                            <div class="error-message" id="editImageError" style="display: none; color: red; font-size: 12px; text-align: center; margin-bottom: 15px;"></div>
                            
                            <div class="mb-3">
                                <label for="editBrandName" class="form-label">Brand Name</label>
                                <input
                                    type="text"
                                    name="brandName"
                                    id="editBrandName"
                                    placeholder="Enter brand name"
                                    class="form-control brand-name"
                                    maxlength="100"
                                />
                                <div class="error-message" id="editNameError" style="display: none; color: red; font-size: 12px;"></div>
                            </div>
                            
                            <div class="mb-4">
                                <label for="editStatus" class="form-label">Status</label>
                                <select id="editStatus" name="status" class="form-control brand-status">
                                    <option value="active">Listed</option>
                                    <option value="inactive">Unlisted</option>
                                </select>
                                <span class="selected-status" style="display: none;"></span>
                                <div class="error-message" id="editStatusError" style="display: none; color: red; font-size: 12px;"></div>
                            </div>
                            
                            <div class="d-grid mt-4">
                                <button class="btn edit-btn" type="submit" id="editBrandButton">UPDATE</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <%- include('../../views/partials/admin/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function validateForm(form, isEdit = false) {
            clearErrorMessages(form);
            const name = form.querySelector(isEdit ? '#editBrandName' : '#brandName').value.trim();
            const status = form.querySelector(isEdit ? '#editStatus' : '#status').value.trim();
            const image = form.querySelector(isEdit ? '#editBrandImage' : '#brandImage').files[0];
            let isValid = true;

            if (name === '') {
                displayErrorMessage(form, isEdit ? 'editNameError' : 'nameError', 'Please enter a brand name');
                isValid = false;
            } else if (!/^[a-zA-Z0-9\s&'-]+$/.test(name)) {
                displayErrorMessage(form, isEdit ? 'editNameError' : 'nameError', 'Brand name can only contain letters, numbers, spaces, &, \', or -');
                isValid = false;
            } else if (name.length < 2 || name.length > 50) {
                displayErrorMessage(form, isEdit ? 'editNameError' : 'nameError', 'Brand name must be between 2 and 50 characters');
                isValid = false;
            }

            if (status === '') {
                displayErrorMessage(form, isEdit ? 'editStatusError' : 'statusError', 'Please select a status');
                isValid = false;
            }

            if (!isEdit && !image) {
                displayErrorMessage(form, 'imageError', 'Please select a brand image');
                isValid = false;
            } else if (image) {
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                const maxSize = 5 * 1024 * 1024;
                if (!allowedTypes.includes(image.type)) {
                    displayErrorMessage(form, isEdit ? 'editImageError' : 'imageError', 'Only JPEG, PNG, or GIF images are allowed');
                    isValid = false;
                } else if (image.size > maxSize) {
                    displayErrorMessage(form, isEdit ? 'editImageError' : 'imageError', 'Image size must not exceed 5MB');
                    isValid = false;
                }
            }

            if (!isValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill all fields correctly'
                });
            }

            return isValid;
        }

        function displayErrorMessage(form, elementId, message) {
            const errorElement = form.querySelector(`#${elementId}`);
            errorElement.innerHTML = message;
            errorElement.style.display = 'block';
        }

        function clearErrorMessages(form) {
            const errorElements = form.querySelectorAll('.error-message');
            errorElements.forEach(element => {
                element.innerHTML = '';
                element.style.display = 'none';
            });
        }

        document.getElementById('brandImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    const imagePreview = document.getElementById('imagePreview');
                    imagePreview.src = event.target.result;
                    imagePreview.style.display = 'block';
                    document.getElementById('uploadPlaceholder').style.display = 'none';
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('editBrandImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    const imagePreview = document.getElementById('editImagePreview');
                    imagePreview.src = event.target.result;
                    imagePreview.style.display = 'block';
                    document.getElementById('editUploadPlaceholder').style.display = 'none';
                };
                reader.readAsDataURL(file);
            }
        });

        let isAddSubmitting = false;
        document.getElementById('addBrandForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            if (isAddSubmitting) return;
            isAddSubmitting = true;
            const form = this;
            const addButton = document.getElementById('addBrandButton');
            const loadingOverlay = document.getElementById('loadingOverlay');
            addButton.disabled = true;
            loadingOverlay.classList.remove('d-none');

            if (!validateForm(form)) {
                isAddSubmitting = false;
                addButton.disabled = false;
                loadingOverlay.classList.add('d-none');
                return;
            }

            const formData = new FormData(form);
            try {
                const response = await fetch('/admin/addBrand', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Server response:', errorText);
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addBrandModal'));
                    modal.hide();
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Brand added successfully!'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to add brand'
                    });
                }
            } catch (error) {
                console.error('Fetch error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: `Failed to add brand: ${error.message}`
                });
            } finally {
                isAddSubmitting = false;
                addButton.disabled = false;
                loadingOverlay.classList.add('d-none');
            }
        });

        const editModalElement = document.getElementById('editBrandModal');
        const editModal = new bootstrap.Modal(editModalElement, {
            keyboard: true,
            backdrop: true
        });

        editModalElement.classList.remove('show');
        editModalElement.style.display = 'none';

        const editIcons = document.querySelectorAll('.edit-icon');
        editIcons.forEach(icon => {
            icon.addEventListener('click', () => {
                const id = icon.getAttribute('data-id');
                if (!id) {
                    console.error('Edit icon missing data-id:', icon);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Invalid brand ID'
                    });
                    return;
                }
                const name = icon.getAttribute('data-name');
                const image = icon.getAttribute('data-image');
                const status = icon.getAttribute('data-status');

                const form = editModalElement.querySelector('.brand-form');
                form.querySelector('.brand-name').value = name || '';
                form.querySelector('.brand-status').value = status === 'listed' ? 'active' : 'inactive';
                form.querySelector('.selected-status').textContent =
                    (status ? status.charAt(0).toUpperCase() + status.slice(1) : 'Listed');
                form.dataset.brandId = id;

                const imagePreview = document.getElementById('editImagePreview');
                const uploadPlaceholder = document.getElementById('editUploadPlaceholder');
                if (image) {
                    imagePreview.src = image;
                    imagePreview.style.display = 'block';
                    uploadPlaceholder.style.display = 'none';
                } else {
                    imagePreview.src = '';
                    imagePreview.style.display = 'none';
                    uploadPlaceholder.style.display = 'block';
                }

                clearErrorMessages(form);
                editModal.show();
            });
        });

        const editCloseButton = editModalElement.querySelector('.close-button');
        editCloseButton.addEventListener('click', () => {
            editModal.hide();
        });

        editModalElement.addEventListener('click', (event) => {
            if (event.target === editModalElement) {
                editModal.hide();
            }
        });

        editModalElement.addEventListener('hidden.bs.modal', () => {
            const form = editModalElement.querySelector('#editBrandForm');
            form.reset();
            document.getElementById('editImagePreview').style.display = 'none';
            document.getElementById('editUploadPlaceholder').style.display = 'block';
            clearErrorMessages(form);
        });

        let isEditSubmitting = false;
        document.getElementById('editBrandForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            if (isEditSubmitting) return;
            isEditSubmitting = true;
            const form = this;
            const editButton = document.getElementById('editBrandButton');
            const loadingOverlay = document.getElementById('editLoadingOverlay');
            const brandId = form.dataset.brandId;

            editButton.disabled = true;
            loadingOverlay.classList.remove('d-none');

            if (!validateForm(form, true)) {
                isEditSubmitting = false;
                editButton.disabled = false;
                loadingOverlay.classList.add('d-none');
                return;
            }

            const formData = new FormData(form);
            formData.append('id', brandId);

            try {
                const response = await fetch('/admin/editBrand', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Server response:', errorText);
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editBrandModal'));
                    modal.hide();
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Brand updated successfully!'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update brand'
                    });
                }
            } catch (error) {
                console.error('Fetch error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: `Failed to update brand: ${error.message}`
                });
            } finally {
                isEditSubmitting = false;
                editButton.disabled = false;
                loadingOverlay.classList.add('d-none');
            }
        });

        document.getElementById('addBrandModal').addEventListener('hidden.bs.modal', function() {
            document.getElementById('addBrandForm').reset();
            document.getElementById('imagePreview').style.display = 'none';
            document.getElementById('uploadPlaceholder').style.display = 'block';
            clearErrorMessages(document.getElementById('addBrandForm'));
        });

        const deleteIcons = document.querySelectorAll('.delete-icon');
        deleteIcons.forEach(icon => {
            icon.addEventListener('click', () => {
                const brandId = icon.getAttribute('data-id');
                if (!brandId) {
                    console.error('Delete icon missing data-id:', icon);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Invalid brand ID'
                    });
                    return;
                }
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'You will not be able to recover this brand!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#7db87d',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // console.log('Sending delete brand request:', { id: brandId });
                        fetch('/admin/deleteBrand', {
                            method: 'POST',
                            headers: {
                             'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ id: brandId })
                        })
                            .then(response => {
                                console.log('Delete brand response:', {
                                    status: response.status,
                                    statusText: response.statusText,
                                    headers: Object.fromEntries(response.headers)
                                });
                                if (!response.ok) {
                                    return response.text().then(text => {
                                        try {
                                            const data = JSON.parse(text);
                                            throw new Error(data.error || `HTTP error ${response.status}`);
                                        } catch (e) {
                                            throw new Error(`Non-JSON response: ${text.substring(0, 50)}...`);
                                        }
                                    });
                                }
                                return response.json();
                            })
                            .then(data => {
                                console.log('Delete brand success:', data);
                                Swal.fire(
                                    'Deleted!',
                                    'Brand has been deleted.',
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            })
                            .catch(error => {
                                console.error('Delete Brand Error:', error.message);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: error.message
                                });
                            });
                    }
                });
            });
        });
    </script>
</body>
</html>