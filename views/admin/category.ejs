<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="/css/adminDashboard.css">
    <link rel="stylesheet" href="/css/adminCategory.css">
</head>
<body>
    <%- include('../../views/partials/admin/header') %>

    <div class="container">
        <div class="button-container">
            <button class="add-button" id="add-button">ADD CATEGORY</button>
        </div>
        
        <table>
            <thead>
                <tr>
                    <th>CATEGORY</th>
                    <th>DESCRIPTION</th>
                    <th>STATUS</th>
                    <th>ACTIONS</th>
                </tr>
            </thead>
            <tbody>
                <% cat.forEach((category, index) => { %>
                <tr>
                    <td><%= category.name %></td>
                    <td><%= category.description %></td>
                    <td><%= category.isListed ? 'Listed' : 'Unlisted' %></td>
                    <td class="actions-cell">
                        <i class="fas fa-pencil-alt edit-icon"
                           data-id="<%= category._id %>"
                           data-name="<%= category.name %>"
                           data-description="<%= category.description %>"
                           data-status="<%= category.isListed ? 'listed' : 'unlisted' %>"></i>
                        <i class="fas fa-trash-alt delete-icon"
                           data-id="<%= category._id %>"></i>
                    </td>
                </tr>
                <% }) %>
            </tbody>
        </table>
    </div>

    <!-- Add Category Modal -->
    <div id="addCategoryModal" class="modal">
        <div class="modal-content">
            <span class="close-button">×</span>
            <form class="category-form" onsubmit="return handleAddFormSubmit(event)">
                <div class="form-group">
                    <label for="addCategoryName">Category Name :</label>
                    <input type="text" class="form-control category-name" id="addCategoryName">
                    <span class="error-message name-error"></span>
                </div>
                <div class="form-group">
                    <label for="addCategoryStatus">Status :</label>
                    <div class="dropdown">
                        <div class="dropdown-select status-dropdown">
                            <span class="selected-status">Select status</span>
                            <span>▾</span>
                        </div>
                        <div class="dropdown-menu status-menu">
                            <div class="dropdown-item" data-value="listed">Listed</div>
                            <div class="dropdown-item" data-value="unlisted">Unlisted</div>
                        </div>
                        <input type="hidden" class="category-status" name="categoryStatus">
                    </div>
                    <span class="error-message status-error"></span>
                </div>
                <div class="form-group">
                    <label for="addCategoryDescription">Category Description :</label>
                    <textarea class="form-control textarea category-description" id="addCategoryDescription"></textarea>
                    <span class="error-message description-error"></span>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="modal-submit-btn">ADD</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div id="editCategoryModal" class="modal">
        <div class="modal-content">
            <span class="close-button">×</span>
            <form class="category-form" onsubmit="return handleEditFormSubmit(event)">
                <div class="form-group">
                    <label for="editCategoryName">Category Name :</label>
                    <input type="text" class="form-control category-name" id="editCategoryName">
                    <span class="error-message name-error"></span>
                </div>
                <div class="form-group">
                    <label for="editCategoryStatus">Status :</label>
                    <div class="dropdown">
                        <div class="dropdown-select status-dropdown">
                            <span class="selected-status">Select status</span>
                            <span>▾</span>
                        </div>
                        <div class="dropdown-menu status-menu">
                            <div class="dropdown-item" data-value="listed">Listed</div>
                            <div class="dropdown-item" data-value="unlisted">Unlisted</div>
                        </div>
                        <input type="hidden" class="category-status" name="categoryStatus">
                    </div>
                    <span class="error-message status-error"></span>
                </div>
                <div class="form-group">
                    <label for="editCategoryDescription">Category Description :</label>
                    <textarea class="form-control textarea category-description" id="editCategoryDescription"></textarea>
                    <span class="error-message description-error"></span>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="modal-submit-btn">UPDATE</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize dropdowns for all modals
            initializeDropdowns();

            // Add Category Modal
            const addButton = document.getElementById('add-button');
            const addModal = document.getElementById('addCategoryModal');
            const addCloseButton = addModal.querySelector('.close-button');

            addButton.addEventListener('click', () => {
                addModal.style.display = 'block';
                const form = addModal.querySelector('.category-form');
                form.reset();
                form.querySelector('.selected-status').textContent = 'Select status';
                form.querySelector('.category-status').value = '';
                clearErrorMessages(form);
            });

            addCloseButton.addEventListener('click', () => {
                addModal.style.display = 'none';
            });

            window.addEventListener('click', (event) => {
                if (event.target === addModal) {
                    addModal.style.display = 'none';
                }
            });

            // Edit Category Modal
            const editModal = document.getElementById('editCategoryModal');
            const editCloseButton = editModal.querySelector('.close-button');
            const editIcons = document.querySelectorAll('.edit-icon');

            editIcons.forEach(icon => {
                icon.addEventListener('click', () => {
                    const id = icon.getAttribute('data-id');
                    if (!id) {
                        console.error('Edit icon missing data-id:', icon);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Invalid category ID'
                        });
                        return;
                    }
                    const name = icon.getAttribute('data-name');
                    const description = icon.getAttribute('data-description');
                    const status = icon.getAttribute('data-status');

                    const form = editModal.querySelector('.category-form');
                    form.querySelector('.category-name').value = name || '';
                    form.querySelector('.category-description').value = description || '';
                    form.querySelector('.category-status').value = status || 'listed';
                    form.querySelector('.selected-status').textContent =
                        (status ? status.charAt(0).toUpperCase() + status.slice(1) : 'Listed');
                    form.dataset.categoryId = id;

                    clearErrorMessages(form);
                    editModal.style.display = 'block';
                });
            });

            editCloseButton.addEventListener('click', () => {
                editModal.style.display = 'none';
            });

            window.addEventListener('click', (event) => {
                if (event.target === editModal) {
                    editModal.style.display = 'none';
                }
            });

            // Delete Category
            const deleteIcons = document.querySelectorAll('.delete-icon');
            deleteIcons.forEach(icon => {
                icon.addEventListener('click', () => {
                    const categoryId = icon.getAttribute('data-id');
                    if (!categoryId) {
                        console.error('Delete icon missing data-id:', icon);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Invalid category ID'
                        });
                        return;
                    }
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You will not be able to recover this category!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#7db87d',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            console.log('delete category request:', { id: categoryId });
                            fetch('/admin/deleteCategory', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ id: categoryId })
                            })
                                .then(response => {
                                    if (!response.ok) {
                                        return response.text().then(text => {
                                            try {
                                                const data = JSON.parse(text);
                                                throw new Error(data.error || `HTTP error ${response.status}`);
                                            } catch (e) {
                                                throw new Error(`Non-JSON response: ${text.substring(0, 50)}...`);
                                            }
                                        });
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    console.log('Delete category success:', data);
                                    Swal.fire(
                                        'Deleted!',
                                        'Category has been deleted.',
                                        'success'
                                    ).then(() => {
                                        location.reload();
                                    });
                                })
                                .catch(error => {
                                    console.error('Delete Category Error:', error.message);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: error.message
                                    });
                                });
                        }
                    });
                });
            });
        });

        // Initialize dropdowns for all modals
        function initializeDropdowns() {
            const dropdowns = document.querySelectorAll('.status-dropdown');
            dropdowns.forEach(dropdown => {
                const menu = dropdown.nextElementSibling;
                const selectedStatus = dropdown.querySelector('.selected-status');
                const statusInput = menu.nextElementSibling;

                dropdown.addEventListener('click', () => {
                    menu.classList.toggle('show');
                });

                const items = menu.querySelectorAll('.dropdown-item');
                items.forEach(item => {
                    item.addEventListener('click', () => {
                        selectedStatus.textContent = item.textContent;
                        statusInput.value = item.getAttribute('data-value');
                        menu.classList.remove('show');
                    });
                });

                document.addEventListener('click', (event) => {
                    if (!dropdown.contains(event.target)) {
                        menu.classList.remove('show');
                    }
                });
            });
        }

        // Form validation
        function validateForm(form) {
            clearErrorMessages(form);
            const name = form.querySelector('.category-name').value.trim();
            const description = form.querySelector('.category-description').value.trim();
            const status = form.querySelector('.category-status').value.trim();
            let isValid = true;

            if (name === '') {
                displayErrorMessage(form, 'name-error', 'Please enter a name');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test( new RegExp(name , "i"))) {
                displayErrorMessage(form, 'name-error', 'Category name should only contain alphabetic characters');
                isValid = false;
            }
            if (description === '') {
                displayErrorMessage(form, 'description-error', 'Please enter a description');
                isValid = false;
            }
            if (status === '') {
                displayErrorMessage(form, 'status-error', 'Please select a status');
                isValid = false;
            }
            if (!isValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill all fields correctly'
                });
            }
            return isValid;
        }

        function displayErrorMessage(form, elementClass, message) {
            const errorElement = form.querySelector(`.${elementClass}`);
            errorElement.innerHTML = message;
            errorElement.style.display = 'block';
        }

        function clearErrorMessages(form) {
            const errorElements = form.querySelectorAll('.error-message');
            errorElements.forEach(element => {
                element.innerHTML = '';
                element.style.display = 'none';
            });
        }

       // Handle Add Form Submission
        function handleAddFormSubmit(event) {
            event.preventDefault();
            const form = event.target;

            // Validate form inputs
            if (!validateForm(form)) {
                return false;
            }

            const name = form.querySelector('.category-name').value.trim();
            const description = form.querySelector('.category-description').value.trim();
            const status = form.querySelector('.category-status').value.trim() === 'listed';

            // Send POST request to add category
            fetch('/admin/addCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name, description, isListed: status }),
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            console.error('Error response:', data);
                            throw new Error(data.error || `HTTP error ${response.status}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('gfjhkhj:', data);
                    document.getElementById('addCategoryModal').style.display = 'none';
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Category added successfully',
                    }).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    console.error('Failed:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to add category',
                    });
                });

            return false;
        }

        // Validate form inputs
        function validateForm(form) {
            const name = form.querySelector('.category-name').value.trim();
            const status = form.querySelector('.category-status').value.trim();

            if (!name) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Category name is required',
                });
                return false;
            }
            if (name.startsWith('$')) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Category name cannot start with "$"',
                });
                return false;
            }
            if (!['listed', 'unlisted'].includes(status)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Invalid status',
                });
                return false;
            }
            return true;
        }

        // Attach event listener to form
        document.addEventListener('DOMContentLoaded', () => {
            const addCategoryForm = document.querySelector('#addCategoryForm'); // Adjust ID if needed
            if (addCategoryForm) {
                addCategoryForm.addEventListener('submit', handleAddFormSubmit);
            }
        });
       // Handle Edit Form Submission
        function handleEditFormSubmit(event) {
            event.preventDefault();
            const form = event.target;
            if (!validateForm(form)) {
                return false;
            }

            const id = form.dataset.categoryId;
            if (!id || id === 'null' || id === '') {
                console.error('Invalid category ID found in form dataset:', form.dataset);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Invalid category ID'
                });
                return false;
            }

            const name = form.querySelector('.category-name').value.trim();
            const description = form.querySelector('.category-description').value.trim();
            const status = form.querySelector('.category-status').value.trim() === 'listed';


            fetch('/admin/editCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id, name, description, isListed: status })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => {
                            try {
                                const data = JSON.parse(text);
                                throw new Error(data.error || `HTTP error ${response.status}`);
                            } catch (e) {
                                throw new Error(`Non-JSON response: ${text.substring(0, 50)}...`);
                            }
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Category updated successfully'
                    }).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    console.error('Edit Category Error:', error.message);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message === 'Category already exists' 
                            ? 'Category name already exists' 
                            : `Failed to update category: ${error.message}`
                    });
                });
            return false;
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <%- include('../../views/partials/admin/footer') %>
</body>
</html>