<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Order Detail Page</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="/css/adminOrderViewPage.css">
</head>
<body>
    <div class="container">
        <div class="dashboard-header">
            <div class="logo-container">
                <img src="/img/footer Logo.png" alt="Logo" class="logo">
                <div class="dropdown">
                    <button class="dropdown-toggle">Menu ‚ñº</button>
                    <div class="dropdown-menu">
                        <a href="/admin/orders" class="dropdown-item">Back to Orders</a>
                    </div>
                </div>
            </div>
            <h1 class="page-title">Order Details</h1>
        </div>
        
        <div class="card">
            <div class="card-header">
                <div class="card-title">
                    <span class="card-title-icon">üìã</span>
                    Order Information
                </div>
                <div class="status-wrapper">
                    <select class="select-status" name="status">
                        <% 
                        const statusOrder = {
                            'Pending': ['Processing'],
                            'Processing': ['Shipped', 'Cancel Request'],
                            'Shipped': ['Delivered', 'Cancel Request'],
                            'Delivered': ['Return Requested'],
                            'Cancel Request': ['Cancelled'],
                            'Return Requested': [],
                            'Return Approved': [],
                            'Cancelled': [],
                            'Partially Returned': []
                        };
                        
                        const allowedStatuses = statusOrder[order.status] || [];
                        %>
                        <option value="<%= order.status %>" selected><%= order.status %></option>
                        <% allowedStatuses.forEach(status => { %>
                            <option value="<%= status %>"><%= status %></option>
                        <% }); %>
                    </select>
                    <button class="btn btn-primary update-btn" data-order-id="<%= order._id %>">
                        <span class="button-icon">‚úì</span>
                        Update Status
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Order ID</div>
                        <div class="info-value"><%= order.orderId %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Customer Name</div>
                        <div class="info-value"><%= order.user ? order.user.firstName + (order.user.lastName ? ' ' + order.user.lastName : '') : 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Order Date</div>
                        <div class="info-value"><%= order.createdOn ? new Date(order.createdOn).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) : 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Delivery Date</div>
                        <div class="info-value"><%= order.deliveryDate ? new Date(order.deliveryDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) : 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Phone</div>
                        <div class="info-value"><%= order.addressDetails.phone || 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Alternative Phone</div>
                        <div class="info-value"><%= order.addressDetails.altPhone || 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Payment Method</div>
                        <div class="info-value"><%= order.paymentMethod ? order.paymentMethod.charAt(0).toUpperCase() + order.paymentMethod.slice(1) : 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Delivery Method</div>
                        <div class="info-value"><%= order.deliveryMethod ? order.deliveryMethod.charAt(0).toUpperCase() + order.deliveryMethod.slice(1) : 'N/A' %></div>
                    </div>
                </div>
                
                <div class="address-box">
                    <div class="address-icon">üìç</div>
                    <div class="info-label">Shipping Address</div>
                    <div class="info-value">
                        <%= order.addressDetails.name ? order.addressDetails.name + ', ' : '' %>
                        <%= order.addressDetails.addressType ? `(${order.addressDetails.addressType}) ` : '' %>
                        <%= order.addressDetails.landMark ? order.addressDetails.landMark + ', ' : '' %>
                        <%= order.addressDetails.city ? order.addressDetails.city + ', ' : '' %>
                        <%= order.addressDetails.state ? order.addressDetails.state + ' - ' : '' %>
                        <%= order.addressDetails.pincode || 'N/A' %>
                    </div>
                </div>

                <% if (order.status === 'Return Requested' || order.status === 'Return Approved') { %>
                    <div class="return-request-box">
                        <div class="return-icon">‚Ü©Ô∏è</div>
                        <div class="info-label">Return Request Details</div>
                        <div class="info-grid">
                            <div class="info-item">
                                <div class="info-label">Requested On</div>
                                <div class="info-value"><%= order.returnRequestedOn ? new Date(order.returnRequestedOn).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) : 'N/A' %></div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Reason</div>
                                <div class="info-value"><%= order.returnReason || 'N/A' %></div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Comments</div>
                                <div class="info-value"><%= order.returnComments || 'N/A' %></div>
                            </div>
                            <% if (order.status === 'Return Requested') { %>
                                <div class="info-item">
                                    <select name="returnStatus" id="returnStatus">
                                        <option value="" selected>Select status</option>
                                        <option value="approved">Approve Return</option>
                                        <option value="rejected">Reject Return</option>
                                    </select>
                                    <button class="btn btn-primary approve-return-btn" data-order-id="<%= order._id %>">
                                        <span class="button-icon">‚úì</span>
                                        Process Status
                                    </button>
                                </div>
                            <% } %>
                        </div>
                    </div>
                <% } %>

                <% if (order.status === 'Cancel Request') { %>
                    <div class="return-request-box">
                        <div class="return-icon">‚Ü©Ô∏è</div>
                        <div class="info-label">Cancellation Request Details</div>
                        <div class="info-grid">
                            <div class="info-item">
                                <div class="info-label">Requested On</div>
                                <div class="info-value"><%= order.cancelRequestedOn ? new Date(order.cancelRequestedOn).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) : 'N/A' %></div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Reason</div>
                                <div class="info-value"><%= order.cancelReason || 'N/A' %></div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Comments</div>
                                <div class="info-value"><%= order.cancelComments || 'N/A' %></div>
                            </div>
                            <div class="info-item">
                                <select name="cancelStatus" id="cancelStatus">
                                    <option value="" selected>Select status</option>
                                    <option value="approved">Approve Cancellation</option>
                                    <option value="rejected">Reject Cancellation</option>
                                </select>
                                <button class="btn btn-primary approve-cancel-btn" data-order-id="<%= order._id %>">
                                    <span class="button-icon">‚úì</span>
                                    Process Status
                                </button>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <div class="card-title">
                    <span class="card-title-icon">üõí</span>
                    Order Items
                </div>
            </div>
            <div class="card-body" style="padding: 0;">
                <table>
                    <thead>
                        <tr>
                            <th style="width: 80px">Product</th>
                            <th>Product Name</th>
                            <th>Size</th>
                            <th>Quantity</th>
                            <th>Unit Price</th>
                            <th>Total Price</th>
                            <th>Gift Wrap</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% order.orderedItems.forEach(item => { %>
                            <tr>
                                <td>
                                    <img src="<%= item.productImage || '/img/placeholder.png' %>" alt="<%= item.productName || 'Product' %>" class="product-img">
                                </td>
                                <td class="product-name"><%= item.productName || 'N/A' %></td>
                                <td><%= item.variant && item.variant.size ? item.variant.size : 'N/A' %></td>
                                <td><%= item.quantity || 'N/A' %></td>
                                <td>‚Çπ<%= Number(item.price || 0).toFixed(2) %></td>
                                <td>‚Çπ<%= Number(item.totalPrice || 0).toFixed(2) %></td>
                                <td><%= item.isGiftWrapped ? 'Yes' : 'No' %></td>
                                <td>
                                    <span class="badge badge-<%= item.status.toLowerCase().replace(' ', '-') %>">
                                        <%= item.status %>
                                    </span>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
                <div class="total-row">
                    <span class="total-label">Subtotal:</span>
                    <span class="total-value">‚Çπ<%= Number(order.totalPrice || 0).toFixed(2) %></span>
                </div>
                <div class="total-row">
                    <span class="total-label">Gift Wrap Total:</span>
                    <span class="total-value">‚Çπ<%= Number(order.giftWrapTotal || 0).toFixed(2) %></span>
                </div>
                <div class="total-row">
                    <span class="total-label">Shipping:</span>
                    <span class="total-value">‚Çπ<%= Number(order.shipping || 0).toFixed(2) %></span>
                </div>
                <% if (order.discount > 0) { %>
                    <div class="total-row">
                        <span class="total-label">Discount:</span>
                        <span class="total-value">-‚Çπ<%= Number(order.discount || 0).toFixed(2) %></span>
                    </div>
                <% } %>
                <div class="total-row">
                    <span class="total-label">Final Amount:</span>
                    <span class="total-value">‚Çπ<%= Number(order.finalAmount || 0).toFixed(2) %></span>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        // Dropdown menu toggle
        document.querySelector('.dropdown-toggle').addEventListener('click', () => {
            const dropdownMenu = document.querySelector('.dropdown-menu');
            dropdownMenu.classList.toggle('show');
        });

        document.addEventListener('click', (event) => {
            const dropdown = document.querySelector('.dropdown');
            if (!dropdown.contains(event.target)) {
                document.querySelector('.dropdown-menu').classList.remove('show');
            }
        });

        document.querySelector('.update-btn').addEventListener('click', async () => {
            try {
                const orderId = document.querySelector('.update-btn').dataset.orderId;
                const statusSelect = document.querySelector('.select-status');
                const currentStatus = statusSelect.options[0].value; // Current status is always the first option
                const newStatus = statusSelect.value;

                if (currentStatus === newStatus) {
                    Toastify({
                        text: 'Please select a different status',
                        duration: 3000,
                        gravity: 'top',
                        position: 'right',
                        className: 'Toastify__toast--warning',
                        stopOnFocus: true,
                    }).showToast();
                    return;
                }

                console.log('Updating order status:', { orderId, currentStatus, newStatus });

                const response = await fetch(`/admin/orders/${orderId}/status`, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ orderId, newStatus })
                });

                const result = await response.json();
                console.log('Update status response:', result);

                if (result.success) {
                    Toastify({
                        text: 'Status updated successfully',
                        duration: 3000,
                        gravity: 'top',
                        position: 'right',
                        className: 'Toastify__toast--success',
                        stopOnFocus: true,
                    }).showToast();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    throw new Error(result.message || 'Failed to update status');
                }
            } catch (error) {
                console.error('Error updating status:', error);
                Toastify({
                    text: `Error updating status: ${error.message}`,
                    duration: 3000,
                    gravity: 'top',
                    position: 'right',
                    className: 'Toastify__toast--error',
                    stopOnFocus: true,
                }).showToast();
            }
        });

        document.querySelectorAll('.approve-return-btn').forEach(button => {
            button.addEventListener('click', async () => {
                const orderId = button.dataset.orderId;
                const statusSelect = document.getElementById("returnStatus");
                const status = statusSelect.value;

                console.log('Processing return request:', {
                    orderId,
                    status,
                    currentOrderStatus: document.querySelector('.select-status').value
                });

                if (!status) {
                    Toastify({
                        text: 'Please select a status (Approve or Reject)',
                        duration: 3000,
                        gravity: 'top',
                        position: 'right',
                        className: 'Toastify__toast--error',
                        stopOnFocus: true,
                    }).showToast();
                    return;
                }

                try {
                    console.log('Sending return approval request...');
                    const response = await fetch(`/admin/orders/${orderId}/approve-return`, {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ status })
                    });

                    console.log('Response status:', response.status);
                    const result = await response.json();
                    console.log('Response data:', result);

                    if (result.success) {
                        Toastify({
                            text: status === 'rejected' ? 'Return rejected successfully' : 'Return approved and refund processed successfully',
                            duration: 3000,
                            gravity: 'top',
                            position: 'right',
                            className: 'Toastify__toast--success',
                            stopOnFocus: true,
                        }).showToast();
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        Toastify({
                            text: `Error processing return: ${result.message}`,
                            duration: 3000,
                            gravity: 'top',
                            position: 'right',
                            className: 'Toastify__toast--error',
                            stopOnFocus: true,
                        }).showToast();
                    }
                } catch (error) {
                    console.error('Error processing return:', error);
                    Toastify({
                        text: `Error: ${error.message}`,
                        duration: 3000,
                        gravity: 'top',
                        position: 'right',
                        className: 'Toastify__toast--error',
                        stopOnFocus: true,
                    }).showToast();
                }
            });
        });

        document.querySelectorAll('.approve-cancel-btn').forEach(button => {
            button.addEventListener('click', async () => {
                const orderId = button.dataset.orderId;
                const status = document.getElementById("cancelStatus").value;

                console.log('Processing cancellation request:', { orderId, status });

                if (!status) {
                    Toastify({
                        text: 'Please select a status (Approve or Reject)',
                        duration: 3000,
                        gravity: 'top',
                        position: 'right',
                        className: 'Toastify__toast--error',
                        stopOnFocus: true,
                    }).showToast();
                    return;
                }

                try {
                    const response = await fetch(`/admin/orders/${orderId}/approve-cancel`, {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ status })
                    });
                    const result = await response.json();
                    if (result.success) {
                        Toastify({
                            text: status === 'rejected' ? 'Cancellation rejected successfully' : 'Cancellation approved and refund processed successfully',
                            duration: 3000,
                            gravity: 'top',
                            position: 'right',
                            className: 'Toastify__toast--success',
                            stopOnFocus: true,
                        }).showToast();
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        Toastify({
                            text: `Error processing cancellation: ${result.message}`,
                            duration: 3000,
                            gravity: 'top',
                            position: 'right',
                            className: 'Toastify__toast--error',
                            stopOnFocus: true,
                        }).showToast();
                    }
                } catch (error) {
                    console.error('Error processing cancellation:', error);
                    Toastify({
                        text: `Error: ${error.message}`,
                        duration: 3000,
                        gravity: 'top',
                        position: 'right',
                        className: 'Toastify__toast--error',
                        stopOnFocus: true,
                    }).showToast();
                }
            });
        });
    </script>
</body>
</html>