 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Book</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/userAddress.css">
</head>
<body>
    <%- include('../../views/partials/user/header') %>

    <div class="container">
        <div class="header">
            <div class="logo">Luxe.com</div>
        </div>

         <div class="breadcrumb-container">
            <div class="container">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/profile">profile</a></li>
                    <li class="breadcrumb-item active">Address</li>
                </ol>
            </div>
        </div>

        <div class="main-content">
            <div class="sidebar">
                <div class="profile-brief">
                    <div class="profile-image">
                        <img src="<%= user && user.profileImage ? user.profileImage : '/api/placeholder/120/120' %>" alt="Profile Image">
                    </div>
                    <div class="profile-info">
                        <div class="profile-name"><%= user && user.firstName && user.lastName ? user.firstName + ' ' + user.lastName : '' %></div>
                        <div class="profile-email"><%= user && user.email ? user.email : 'N/A' %></div>
                    </div>
                </div>

                <ul class="nav-menu">
                    <h3>Manage My Account</h3>
                    <li><a href="/profile"><i class="fas fa-user"></i> My Profile</a></li>
                    <li><a href="/address" class="active"><i class="fas fa-address-book"></i> Address Book</a></li>

                    <h3>Orders & Wishlist</h3>
                    <li><a href="/orders"><i class="fas fa-shopping-bag"></i> My Orders</a></li>
                    <li><a href="/wishlist"><i class="fas fa-heart"></i> My Wishlist</a></li>

                    <h3>Payments</h3>
                    <li><a href="/wallet"><i class="fas fa-wallet"></i> My Wallet</a></li>
                    <li><a href="/coupons"><i class="fas fa-tag"></i> My Coupons</a></li>
                    <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Sign Out</a></li>
                </ul>
            </div>

            <div class="content">
                <div class="address-header">
                    <h1>Address Book</h1>
                    <button id="addAddressBtn" class="add-address-btn">
                        <i class="fas fa-plus"></i> Add New Address
                    </button>
                </div>
            
                <% if (!address || address.length === 0) { %>
                <div class="card">
                    <div class="no-addresses">
                        <i class="fas fa-map-marker-alt"></i>
                        <h3>No addresses found</h3>
                        <p>You haven't added any addresses to your address book yet.</p>
                        <button id="addFirstAddressBtn" class="add-first-address-btn">
                            <i class="fas fa-plus"></i> Add your first address
                        </button>
                    </div>
                </div>
                <% } else { %>
                <div class="card">
                    <% address.forEach(function(addr, index) { %>
                    <div class="address-card">
                        <% if (addr.isDefault) { %>
                        <div class="default-badge">Default</div>
                        <% } %>
                        <div class="address-tag"><%= addr.addressType %></div>
                        <h3><%= addr.name %></h3>
                        <div class="address-details">
                            <%= addr.landMark %><br>
                            <%= addr.city %>, <%= addr.state %> <%= addr.pincode %><br>
                            Phone: <%= addr.phone %><br>
                            Alternate Phone: <%= addr.altPhone || 'N/A' %>
                        </div>
                        <div class="address-actions">
                            <button class="address-btn edit-address-btn" data-id="<%= addr._id %>">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <% if (!addr.isDefault) { %>
                            <button class="address-btn make-default-btn" data-id="<%= addr._id %>">
                                <i class="fas fa-check-circle"></i> Set as Default
                            </button>
                            <button class="address-btn delete-address-btn" data-id="<%= addr._id %>">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                            <% } %>
                        </div>
                    </div>
                    <% }); %>
                </div>
                <% } %>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="addressModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title" id="modalTitle">Add New Address</div>
                <button class="close-btn" id="closeModalBtn">Ã—</button>
            </div>

            <div class="modal-body">
                <form id="addressForm" action="/address/add" method="POST">
                    <input type="hidden" id="addressId" name="addressId">
                    
                    <div class="form-section">
                        <div class="form-section-header">
                            <div class="form-section-title">Contact Information</div>
                            <div class="required-note">Required Fields*</div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="name">Full Name *</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                            <div class="error-message" id="nameError">Please enter the full name.</div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="phone">Phone Number *</label>
                            <input type="tel" class="form-control" id="phone" name="phone" required>
                            <div class="error-message" id="phoneError">Please enter a valid 10-digit phone number.</div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="altPhone">Alternate Phone Number</label>
                            <input type="tel" class="form-control" id="altPhone" name="altPhone">
                            <div class="error-message" id="altPhoneError">Please enter a valid 10-digit phone number.</div>
                        </div>
                    </div>

                    <div class="form-section">
                        <div class="form-section-header">
                            <div class="form-section-title">Address Details</div>
                        </div>
                    
                        <div class="form-group">
                            <label class="form-label" for="addressType">Address Type *</label>
                            <select class="form-control" id="addressType" name="addressType" required>
                                <option value="">Select Address Type</option>
                                <option value="Home">Home</option>
                                <option value="Work">Work</option>
                                <option value="Other">Other</option>
                            </select>
                            <div class="error-message" id="addressTypeError">Please select an address type.</div>
                        </div>
                    
                        <div class="form-group">
                            <label class="form-label" for="landMark">Landmark *</label>
                            <input type="text" class="form-control" id="landMark" name="landMark" required>
                            <div class="error-message" id="landMarkError">Please enter a landmark.</div>
                        </div>
                    
                        <div class="form-group">
                            <label class="form-label" for="city">City *</label>
                            <input type="text" class="form-control" id="city" name="city" required>
                            <div class="error-message" id="cityError">Please enter your city.</div>
                        </div>
                    
                        <div class="form-group">
                            <label class="form-label" for="state">State *</label>
                            <input type="text" class="form-control" id="state" name="state" required>
                            <div class="error-message" id="stateError">Please enter your state.</div>
                        </div>
                    
                        <div class="form-group">
                            <label class="form-label" for="pincode">Pincode *</label>
                            <input type="text" class="form-control" id="pincode" name="pincode" required>
                            <div class="error-message" id="pincodeError">Please enter a valid 6-digit pincode.</div>
                        </div>
                    
                        <div class="checkbox-group">
                            <input type="checkbox" id="isDefault" name="isDefault">
                            <label for="isDefault">Set as default address</label>
                        </div>
                    </div>

                    <div class="button-group-three">
                        <button type="button" class="cancel-btn" id="cancelBtn">Cancel</button>
                        <button type="button" class="delete-btn" id="deleteModalBtn" style="display: none;">Delete</button>
                        <button type="submit" class="save-btn">Save Address</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="deleteModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title">Delete Address</div>
                <button class="close-btn" id="closeDeleteModalBtn">Ã—</button>
            </div>

            <div class="modal-body delete-confirm-modal">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>Are you sure?</h3>
                <p>Do you really want to delete this address? This process cannot be undone.</p>
                <div class="button-group">
                    <button class="cancel-btn" id="cancelDeleteBtn">Cancel</button>
                    <button class="save-btn" id="confirmDeleteBtn" style="background-color: #dc3545;">Delete</button>
                </div>
                <input type="hidden" id="deleteAddressId">
            </div>
        </div>
    </div>

    <%- include('../../views/partials/user/footer') %>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const addressModal = document.getElementById('addressModal');
        const deleteModal = document.getElementById('deleteModal');
        
        const addAddressBtn = document.getElementById('addAddressBtn');
        const addFirstAddressBtn = document.getElementById('addFirstAddressBtn');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const deleteModalBtn = document.getElementById('deleteModalBtn');
        const closeDeleteModalBtn = document.getElementById('closeDeleteModalBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

        const addressForm = document.getElementById('addressForm');

        function openAddressModal() {
            document.getElementById('modalTitle').textContent = 'Add New Address';
            addressForm.reset();
            addressForm.action = '/address/add';
            document.getElementById('addressId').value = '';
            deleteModalBtn.style.display = 'none';
            addressModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }

        function closeAddressModal() {
            addressModal.classList.remove('active');
            document.body.style.overflow = '';
            const formGroups = addressForm.querySelectorAll('.form-group');
            formGroups.forEach(group => {
                group.classList.remove('invalid');
            });
        }

        function openDeleteModal(addressId) {
            document.getElementById('deleteAddressId').value = addressId;
            deleteModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }

        function closeDeleteModal() {
            deleteModal.classList.remove('active');
            document.body.style.overflow = '';
        }

        function validateAddressForm() {
            let isValid = true;
            const fields = [
                { id: 'name', errorId: 'nameError', message: 'Please enter the full name.' },
                { id: 'phone', errorId: 'phoneError', message: 'Please enter a valid 10-digit phone number.', pattern: /^[6-9]\d{9}$/ },
                { id: 'addressType', errorId: 'addressTypeError', message: 'Please select an address type.' },
                { id: 'landMark', errorId: 'landMarkError', message: 'Please enter a landmark.' },
                { id: 'city', errorId: 'cityError', message: 'Please enter your city.' },
                { id: 'state', errorId: 'stateError', message: 'Please enter your state.' },
                { id: 'pincode', errorId: 'pincodeError', message: 'Please enter a valid 6-digit pincode.', pattern: /^[1-9][0-9]{5}$/ },
            ];

            fields.forEach(field => {
                const input = document.getElementById(field.id);
                const formGroup = input.closest('.form-group');
                const errorElement = document.getElementById(field.errorId);

                if (!input.value.trim() || (field.pattern && !field.pattern.test(input.value))) {
                    formGroup.classList.add('invalid');
                    errorElement.textContent = field.message;
                    isValid = false;
                } else {
                    formGroup.classList.remove('invalid');
                }
            });

            return isValid;
        }

        if (addAddressBtn) {
            addAddressBtn.addEventListener('click', openAddressModal);
        }
        if (addFirstAddressBtn) {
            addFirstAddressBtn.addEventListener('click', openAddressModal);
        }
        if (closeModalBtn) {
            closeModalBtn.addEventListener('click', closeAddressModal);
        }
        if (cancelBtn) {
            cancelBtn.addEventListener('click', closeAddressModal);
        }
        if (deleteModalBtn) {
            deleteModalBtn.addEventListener('click', () => {
                const addressId = document.getElementById('addressId').value;
                if (addressId) {
                    openDeleteModal(addressId);
                }
            });
        }
        if (closeDeleteModalBtn) {
            closeDeleteModalBtn.addEventListener('click', closeDeleteModal);
        }
        if (cancelDeleteBtn) {
            cancelDeleteBtn.addEventListener('click', closeDeleteModal);
        }

        addressForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!validateAddressForm()) {
                return;
            }
            try {
                const formData = new FormData(addressForm);
                const data = Object.fromEntries(formData);
                data.isDefault = document.getElementById('isDefault').checked;

                const mappedData = {
                    addressType: data.addressType,
                    name: data.name,
                    landMark: data.landMark,
                    city: data.city,
                    state: data.state,
                    pincode: data.pincode,
                    phone: data.phone,
                    altPhone: data.altPhone || '',
                    isDefault: data.isDefault,
                };

                const response = await fetch(addressForm.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(mappedData),
                });

                const result = await response.json();
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: result.message || 'Address saved successfully!',
                        timer: 2000,
                        showConfirmButton: false,
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message || 'Failed to save address.',
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while saving the address.',
                });
            }
        });

        document.querySelectorAll('.edit-address-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const addressId = btn.dataset.id;
                try {
                    const response = await fetch(`/address/${addressId}`);
                    const address = await response.json();

                    document.getElementById('modalTitle').textContent = 'Edit Address';
                    addressForm.action = `/address/edit/${addressId}`;
                    document.getElementById('addressId').value = addressId;
                    
                    document.getElementById('name').value = address.name || '';
                    document.getElementById('phone').value = address.phone || '';
                    document.getElementById('addressType').value = address.addressType || '';
                    document.getElementById('landMark').value = address.landMark || '';
                    document.getElementById('city').value = address.city || '';
                    document.getElementById('state').value = address.state || '';
                    document.getElementById('pincode').value = address.pincode || '';
                    document.getElementById('altPhone').value = address.altPhone || '';
                    document.getElementById('isDefault').checked = address.isDefault || false;

                    deleteModalBtn.style.display = 'block';
                    addressModal.classList.add('active');
                    document.body.style.overflow = 'hidden';
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to load address details.',
                    });
                }
            });
        });

        document.querySelectorAll('.make-default-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const addressId = btn.dataset.id;
                try {
                    const response = await fetch(`/address/set-default/${addressId}`, {
                        method: 'POST',
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Default address updated successfully!',
                            timer: 2000,
                            showConfirmButton: false,
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Failed to set default address.',
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while setting default address.',
                    });
                }
            });
        });

        document.querySelectorAll('.delete-address-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                openDeleteModal(btn.dataset.id);
            });
        });

        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', async () => {
                const addressId = document.getElementById('deleteAddressId').value;
                try {
                    const response = await fetch(`/address/delete/${addressId}`, {
                        method: 'DELETE',
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Address deleted successfully!',
                            timer: 2000,
                            showConfirmButton: false,
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Failed to delete address.',
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while deleting the address.',
                    });
                }
                closeDeleteModal();
            });
        }

        [addressModal, deleteModal].forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                    document.body.style.overflow = '';
                }
            });
        });
    });
</script>
</body>
</html>