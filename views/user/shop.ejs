<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shop | Luxury Fragrances</title>
  <link rel="stylesheet" href="/css/shop.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
  <%- include('../../views/partials/user/header') %>
  <nav>
    <button class="filter-button" id="filterBtn">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="4" y1="21" x2="4" y2="14"></line>
        <line x1="4" y1="10" x2="4" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="12"></line>
        <line x1="12" y1="8" x2="12" y2="3"></line>
        <line x1="20" y1="21" x2="20" y2="16"></line>
        <line x1="20" y1="12" x2="20" y2="3"></line>
        <line x1="1" y1="14" x2="7" y2="14"></line>
        <line x1="9" y1="8" x2="15" y2="8"></line>
        <line x1="17" y1="16" x2="23" y2="16"></line>
      </svg>
      FILTER
    </button>
    <button class="sort-button" id="sortBtn">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M11 5h10"></path>
        <path d="M11 9h7"></path>
        <path d="M11 13h4"></path>
        <path d="M3 17l3 3 3-3"></path>
        <path d="M6 18V5"></path>
      </svg>
      SORT
    </button>
  </nav>
  
  <!-- Filter Modal Structure -->
  <div class="modal filter-modal" id="filterModal">
    <div class="modal-header">
      <h2>SHOW FILTERS</h2>
      <button class="close-button" id="closeFilterBtn">×</button>
    </div>
    <div class="modal-body">
      <div class="filter-section">
        <div class="filter-title" data-target="brandOptions">
          <span>BRANDS</span>
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="arrow-icon">
            <polyline points="18 15 12 9 6 15"></polyline>
          </svg>
        </div>
        <div class="filter-options" id="brandOptions">
          <% if (brands && Array.isArray(brands) && brands.length > 0) { %>
            <% brands.forEach(brand => { %>
              <label class="filter-option">
                <input type="checkbox" name="brandf" value="<%= brand._id %>" <%= currentFilters.brandf.includes(brand._id.toString()) ? 'checked' : '' %>>
                <%= brand.brandName %>
              </label>
            <% }) %>
          <% } else { %>
            <p>No listed brands available</p>
          <% } %>
        </div>
      </div>
      
      <div class="filter-section">
        <div class="filter-title" data-target="categoryOptions">
          <span>CATEGORY</span>
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="arrow-icon">
            <polyline points="18 15 12 9 6 15"></polyline>
          </svg>
        </div>
        <div class="filter-options" id="categoryOptions">
          <% if (categories && Array.isArray(categories) && categories.length > 0) { %>
            <% categories.forEach(category => { %>
              <label class="filter-option">
                <input type="checkbox" name="categoryf" value="<%= category._id %>" <%= currentFilters.categoryf.includes(category._id.toString()) ? 'checked' : '' %>>
                <%= category.name %>
              </label>
            <% }) %>
          <% } else { %>
            <p>No listed categories available</p>
          <% } %>
        </div>
      </div>
    </div>
    
    <div class="button-container">
      <button class="clear-button" id="clearFilters">CLEAR ALL</button>
      <button class="show-button" id="applyFilters">SHOW PRODUCTS</button>
    </div>
  </div>

  <!-- Sort Modal Structure -->
  <div class="modal sort-modal" id="sortModal">
    <div class="modal-header">
      <h2>SORT</h2>
      <button class="close-button" id="closeSortBtn">×</button>
    </div>
    <div class="modal-body">
      <div class="sort-options">
        <label class="filter-option">
          <input type="radio" name="sort" value="A-Z" <%= currentFilters.sort === 'A-Z' || !currentFilters.sort ? 'checked' : '' %>>
          A-Z Order
        </label>
        <label class="filter-option">
          <input type="radio" name="sort" value="Z-A" <%= currentFilters.sort === 'Z-A' ? 'checked' : '' %>>
          Z-A Order
        </label>
        <label class="filter-option">
          <input type="radio" name="sort" value="price-low-high" <%= currentFilters.sort === 'price-low-high' ? 'checked' : '' %>>
          Price: Low → High
        </label>
        <label class="filter-option">
          <input type="radio" name="sort" value="price-high-low" <%= currentFilters.sort === 'price-high-low' ? 'checked' : '' %>>
          Price: High → Low
        </label>
      </div>
      
      <div class="price-section">
        <h3>PRICE RANGE</h3>
        <div class="price-inputs">
          <div>From</div>
          <input type="number" class="price-input" id="minPrice" name="priceFrom" value="<%= currentFilters.minValue || '' %>" placeholder="Min">
          <div>To</div>
          <input type="number" class="price-input" id="maxPrice" name="priceTo" value="<%= currentFilters.maxValue || '' %>" placeholder="Max">
        </div>
      </div>
    </div>
    
    <div class="button-container">
      <button class="clear-button" id="clearSort">CLEAR ALL</button>
      <button class="show-button" id="applySort">SHOW PRODUCTS</button>
    </div>
  </div>

  <div class="modal-backdrop" id="modalBackdrop"></div>
  
  <div class="hero">
    <div class="hero-image">
      <video width="320" height="240" autoplay muted loop playsinline>
        <source src="https://videos.pexels.com/video-files/7815734/7815734-sd_640_360_25fps.mp4" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div> 
  </div>

  <div class="main-content">
    <div class="celebrity-products">
      <% if (products && products.length > 0) { %>
        <div class="container">
          <div class="row">
            <% products.forEach(product => { %>
              <div class="col-md-4 col-lg-3 mb-4">
                <div class="product-card">
                  <div class="product-image-container">
                    <% if (product.bestOffer) { %>
                      <div class="offer-badge <%= product.bestOffer.offerType %> <%= product.bestOffer.discount >= 40 ? 'limited-time' : '' %>">
                        <%= product.bestOffer.discount %>% OFF
                      </div>
                    <% } %>
                    <a href="/productViewPage?id=<%= product.id %>">
                      <img src="<%= product.image %>" alt="<%= product.name %>">
                    </a>
                    <button class="btn-wishlist" onclick="toggleWishlist('<%= product.id %>', this)">
                      <i class="<%= wishlistProductIds.includes(product.id.toString()) ? 'fa-solid' : 'fa-regular' %> fa-heart" 
                         style="<%= wishlistProductIds.includes(product.id.toString()) ? 'color: red;' : '' %>"></i>
                    </button>
                  </div>
                  <div class="product-info p-3">
                    <h3 class="product-title"><%= product.name %></h3>
                    <div class="price-container">
                      <span class="current-price">₹<%= Math.round(product.discountedPrice) %></span>
                      <% if (product.discountedPrice < product.price) { %>
                        <span class="original-price">₹<%= product.price %></span>
                        <span class="discount-percent"><%= Math.round((product.price - product.discountedPrice) / product.price * 100) %>% off</span>
                      <% } %>
                    </div>
                    <button class="add-to-cart" 
                            onclick="addToCart('<%= product.id %>', this)" 
                            data-product-id="<%= product._id %>"
                            data-variants='<%= JSON.stringify(product.variants[0]._id) %>'>
                      <span class="button-text">Add to bag</span>
                      <div class="loading-spinner" style="display: none;">
                        <i class="fas fa-spinner fa-spin"></i>
                      </div>
                    </button>
                  </div>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      <% } else { %>
        <div class="no-products">
          <h3>No products found</h3>
          <p>Try adjusting your filters or check back later.</p>
        </div>
      <% } %>

      <!-- Pagination UI -->
      <% if (pagination && pagination.totalPages > 1) { %>
        <div class="pagination-container">
          <div class="pagination">
            <% if (pagination.hasPrevPage) { %>
              <a href="#" class="page-link" onclick="changePage(<%= pagination.prevPage %>)">
                <i class="fas fa-chevron-left"></i>
              </a>
            <% } %>

            <% for(let i = 1; i <= pagination.totalPages; i++) { %>
              <a href="#" 
                class="page-link <%= i === pagination.currentPage ? 'active' : '' %>"
                onclick="changePage(<%= i %>)">
                <%= i %>
              </a>
            <% } %>

            <% if (pagination.hasNextPage) { %>
              <a href="#" class="page-link" onclick="changePage(<%= pagination.nextPage %>)">
                <i class="fas fa-chevron-right"></i>
              </a>
            <% } %>
          </div>
          <div class="pagination-info">
            Showing <%= (pagination.currentPage - 1) * 8 + 1 %>-<%= Math.min(pagination.currentPage * 8, pagination.totalProducts) %> 
            of <%= pagination.totalProducts %> products
          </div>
        </div>
      <% } %>
    </div>
  </div>
  
  <%- include("../../views/partials/user/footer") %>
  
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    function startCountdown(productId, endDate) {
      const timerElement = document.getElementById(`timer-${productId}`);
      if (!timerElement) return;

      const timer = setInterval(() => {
        const now = new Date().getTime();
        const end = new Date(endDate).getTime();
        const distance = end - now;

        if (distance < 0) {
          clearInterval(timer);
          timerElement.innerHTML = "EXPIRED";
          return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        document.getElementById(`days-${productId}`).textContent = days.toString().padStart(2, '0');
        document.getElementById(`hours-${productId}`).textContent = hours.toString().padStart(2, '0');
        document.getElementById(`minutes-${productId}`).textContent = minutes.toString().padStart(2, '0');
        document.getElementById(`seconds-${productId}`).textContent = seconds.toString().padStart(2, '0');
      }, 1000);
    }

    <% products.forEach(product => { %>
      <% if (product.status === 'listed' && product.bestOffer && product.bestOffer.discount >= 40) { %>
        startCountdown('<%= product.id %>', '<%= product.bestOffer.endDate %>');
      <% } %>
    <% }) %>

    async function fetchProducts(page = 1) {
      const brands = Array.from(document.querySelectorAll('#filterModal input[name="brandf"]:checked'))
        .map(input => input.value);
      const categories = Array.from(document.querySelectorAll('#filterModal input[name="categoryf"]:checked'))
        .map(input => input.value);
      let priceFrom = document.querySelector('#sortModal input[name="priceFrom"]').value;
      let priceTo = document.querySelector('#sortModal input[name="priceTo"]').value;
      const sortOption = document.querySelector('#sortModal input[name="sort"]:checked').value;

      priceFrom = priceFrom ? parseFloat(priceFrom) : '';
      priceTo = priceTo ? parseFloat(priceTo) : '';
      if (priceFrom && isNaN(priceFrom)) priceFrom = '';
      if (priceTo && isNaN(priceTo)) priceTo = '';

      const query = new URLSearchParams();
      if (brands.length > 0) query.append('brands', brands.join(','));
      if (categories.length > 0) query.append('category', categories.join(','));
      if (priceFrom !== '') query.append('priceFrom', priceFrom);
      if (priceTo !== '') query.append('priceTo', priceTo);
      if (sortOption) query.append('sort', sortOption);
      query.append('page', page);

      window.location.href = `/shop?${query.toString()}`;
    }

    async function toggleWishlist(productId, button) {
      try {
        const icon = button.querySelector('i');
        const isInWishlist = icon.classList.contains('fa-solid');
        button.disabled = true;

        const url = isInWishlist ? `/wishlist/remove/${productId}` : `/wishlist/add/${productId}`;
        const response = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
        });

        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const result = await response.json();

        if (result.success) {
          if (isInWishlist) {
            icon.classList.remove('fa-solid', 'fa-heart');
            icon.classList.add('fa-regular', 'fa-heart');
            icon.style.color = '';
            showToast('Removed from wishlist', 'success');
          } else {
            icon.classList.remove('fa-regular', 'fa-heart');
            icon.classList.add('fa-solid', 'fa-heart');
            icon.style.color = 'red';
            showToast('Added to wishlist', 'success');
          }
        } else {
          if (result.message.includes('log in')) {
            window.location.href = '/login';
          } else {
            showToast(result.message, 'error');
          }
        }
      } catch (error) {
        console.error('Error toggling wishlist:', error);
        showToast('Failed to update wishlist. Please try again.', 'error');
      } finally {
        button.disabled = false;
      }
    }

    function showToast(message, icon = 'success') {
      Swal.fire({
        toast: true,
        position: 'top-end',
        icon: icon,
        title: message,
        showConfirmButton: false,
        timer: 2000,
        timerProgressBar: true,
      });
    }

    async function addToCart(productId, button) {
      console.log("product", productId);
      try {
        if (!button) {
          console.error('Button element not found');
          return;
        }

        const buttonText = button.querySelector('.button-text');
        const loadingSpinner = button.querySelector('.loading-spinner');
        
        if (!buttonText || !loadingSpinner) {
          console.error('Button elements not found');
          showToast('Something went wrong. Please try again.', 'error');
          return;
        }

        const btnText = buttonText;
        const spinner = loadingSpinner;

        button.disabled = true;
        btnText.style.display = 'none';
        spinner.style.display = 'block';

        let variantId;
        try {
          const variantsData = button.getAttribute('data-variants');
          console.log(variantsData);
          variantId = variantsData ? JSON.parse(variantsData) : null;
        } catch (e) {
          console.error('Error parsing variants:', e);
          variantId = null;
        }

        const response = await fetch('/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            productId: productId,
            variantId,
            quantity: 1,
            isGiftWrapped: false,
          }),
          credentials: 'same-origin',
        });

        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          window.location.href = '/login';
          return;
        }

        const result = await response.json();

        if (result.success) {
          showToast('Added to bag successfully!', 'success');
          if (result.cartCount) {
            const cartCountElement = document.getElementById('cartCount');
            if (cartCountElement) {
              cartCountElement.textContent = result.cartCount;
            }
          }
          if (result.isMaxQuantity) {
            window.location.href = '/cart';
          }
        } else {
          if (result.message && result.message.includes('log in')) {
            window.location.href = '/login';
          } else {
            showToast(result.message || 'Failed to add to cart', 'error');
          }
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        if (error instanceof SyntaxError && error.message.includes('Unexpected token')) {
          window.location.href = '/login';
          return;
        }
        showToast('Failed to add to cart. Please try again.', 'error');
      } finally {
        if (button) {
          button.disabled = false;
          const btnText = button.querySelector('.button-text');
          const spinner = button.querySelector('.loading-spinner');
          if (btnText) btnText.style.display = 'block';
          if (spinner) spinner.style.display = 'none';
        }
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      async function fetchProducts(page = 1) {
        const brands = Array.from(document.querySelectorAll('#filterModal input[name="brandf"]:checked'))
          .map(input => input.value);
        const categories = Array.from(document.querySelectorAll('#filterModal input[name="categoryf"]:checked'))
          .map(input => input.value);
        let priceFrom = document.querySelector('#sortModal input[name="priceFrom"]').value;
        let priceTo = document.querySelector('#sortModal input[name="priceTo"]').value;
        const sortOption = document.querySelector('#sortModal input[name="sort"]:checked').value;

        priceFrom = priceFrom ? parseFloat(priceFrom) : '';
        priceTo = priceTo ? parseFloat(priceTo) : '';
        if (priceFrom && isNaN(priceFrom)) priceFrom = '';
        if (priceTo && isNaN(priceTo)) priceTo = '';

        const query = new URLSearchParams();
        if (brands.length > 0) query.append('brands', brands.join(','));
        if (categories.length > 0) query.append('category', categories.join(','));
        if (priceFrom !== '') query.append('priceFrom', priceFrom);
        if (priceTo !== '') query.append('priceTo', priceTo);
        if (sortOption) query.append('sort', sortOption);
        query.append('page', page);

        window.location.href = `/shop?${query.toString()}`;
      }

      function changePage(page) {
        fetchProducts(page);
      }

      window.changePage = changePage;

      document.querySelector('#applyFilters').addEventListener('click', () => {
        fetchProducts(1);
        closeModal('#filterModal');
      });

      document.querySelector('#clearFilters').addEventListener('click', () => {
        document.querySelectorAll('#filterModal input[type="checkbox"]').forEach(input => input.checked = false);
        fetchProducts(1);
      });

      document.querySelector('#applySort').addEventListener('click', () => {
        fetchProducts(1);
        closeModal('#sortModal');
      });

      document.querySelector('#clearSort').addEventListener('click', () => {
        document.querySelector('#sortModal input[name="sort"][value="A-Z"]').checked = true;
        document.querySelector('#sortModal input[name="priceFrom"]').value = '';
        document.querySelector('#sortModal input[name="priceTo"]').value = '';
        fetchProducts(1);
      });
    });

    function closeModal(modalId) {
      document.querySelector(modalId).style.display = 'none';
    }

    document.querySelector('#filterBtn').addEventListener('click', () => {
      document.querySelector('#filterModal').style.display = 'block';
    });
    document.querySelector('#sortBtn').addEventListener('click', () => {
      document.querySelector('#sortModal').style.display = 'block';
    });
    document.querySelector('#closeFilterBtn').addEventListener('click', () => {
      closeModal('#filterModal');
    });
    document.querySelector('#closeSortBtn').addEventListener('click', () => {
      closeModal('#sortModal');
    });
    document.querySelectorAll('.filter-title').forEach(title => {
      title.addEventListener('click', () => {
        const targetId = title.getAttribute('data-target');
        const target = document.querySelector(`#${targetId}`);
        target.classList.toggle('show');
        const arrow = title.querySelector('.arrow-icon');
        arrow.classList.toggle('rotate');
      });
    });
  </script>
</body>
</html>