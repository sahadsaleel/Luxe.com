<!-- views/user/shop.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shop | Luxury Fragrances</title>
  <link rel="stylesheet" href="/css/home.css">
  <link rel="stylesheet" href="/css/shop.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .wishlist-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: transparent;
      border: none;
      font-size: 1.2rem;
      color: #8a6a94;
      transition: color 0.3s ease;
    }
    .wishlist-btn:hover {
      color: #1a1a1a;
    }
    .wishlist-btn:disabled {
      background-color: #cccccc;
      color: #666666;
      cursor: not-allowed;
      opacity: 0.6;
    }
    .product-card {
      position: relative;
    }
  </style>
</head>
<body>
  <%- include('../../views/partials/user/header') %>
  <nav>
    <button class="filter-button" id="filterBtn">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="4" y1="21" x2="4" y2="14"></line>
        <line x1="4" y1="10" x2="4" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="12"></line>
        <line x1="12" y1="8" x2="12" y2="3"></line>
        <line x1="20" y1="21" x2="20" y2="16"></line>
        <line x1="20" y1="12" x2="20" y2="3"></line>
        <line x1="1" y1="14" x2="7" y2="14"></line>
        <line x1="9" y1="8" x2="15" y2="8"></line>
        <line x1="17" y1="16" x2="23" y2="16"></line>
      </svg>
      FILTER
    </button>
    <button class="sort-button" id="sortBtn">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M11 5h10"></path>
        <path d="M11 9h7"></path>
        <path d="M11 13h4"></path>
        <path d="M3 17l3 3 3-3"></path>
        <path d="M6 18V5"></path>
      </svg>
      SORT
    </button>
  </nav>
  <div class="modal filter-modal" id="filterModal">
    <div class="modal-header">
      <h2>SHOW FILTERS</h2>
      <button class="close-button" id="closeFilterBtn">×</button>
    </div>
    <div class="filter-section">
      <div class="filter-title" data-target="brandOptions">
        <span>BRANDS</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="arrow-icon">
          <polyline points="18 15 12 9 6 15"></polyline>
        </svg>
      </div>
      <div class="filter-options" id="brandOptions">
        <% if (brands && Array.isArray(brands) && brands.length > 0) { %>
          <% brands.forEach(brand => { %>
            <label class="filter-option">
              <input type="checkbox" name="brandf" value="<%= brand._id %>" <%= currentFilters.brandf.includes(brand._id.toString()) ? 'checked' : '' %>>
              <%= brand.brandName %>
            </label>
          <% }) %>
        <% } else { %>
          <p>No listed brands available</p>
        <% } %>
      </div>
    </div>
    <div class="filter-section">
      <div class="filter-title" data-target="categoryOptions">
        <span>CATEGORY</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="arrow-icon">
          <polyline points="18 15 12 9 6 15"></polyline>
        </svg>
      </div>
      <div class="filter-options" id="categoryOptions">
        <% if (categories && Array.isArray(categories) && categories.length > 0) { %>
          <% categories.forEach(category => { %>
            <label class="filter-option">
              <input type="checkbox" name="categoryf" value="<%= category._id %>" <%= currentFilters.categoryf.includes(category._id.toString()) ? 'checked' : '' %>>
              <%= category.name %>
            </label>
          <% }) %>
        <% } else { %>
          <p>No listed categories available</p>
        <% } %>
      </div>
    </div>
    <div class="button-container">
      <button class="clear-button" id="clearFilters">CLEAR ALL</button>
      <button class="show-button" id="applyFilters">SHOW PRODUCTS</button>
    </div>
  </div>
  <div class="modal sort-modal" id="sortModal">
    <div class="modal-header">
      <h2>SORT</h2>
      <button class="close-button" id="closeSortBtn">×</button>
    </div>
    <div class="filter-options show" style="display: flex; flex-direction: column; gap: 15px; margin-bottom: 30px;">
      <label class="filter-option">
        <input type="radio" name="sort" value="A-Z" <%= currentFilters.sort === 'A-Z' || !currentFilters.sort ? 'checked' : '' %>>
        A-Z Order
      </label>
      <label class="filter-option">
        <input type="radio" name="sort" value="Z-A" <%= currentFilters.sort === 'Z-A' ? 'checked' : '' %>>
        Z-A Order
      </label>
      <label class="filter-option">
        <input type="radio" name="sort" value="price-low-high" <%= currentFilters.sort === 'price-low-high' ? 'checked' : '' %>>
        Price: Low → High
      </label>
      <label class="filter-option">
        <input type="radio" name="sort" value="price-high-low" <%= currentFilters.sort === 'price-high-low' ? 'checked' : '' %>>
        Price: High → Low
      </label>
    </div>
    <h3 style="margin-bottom: 15px;">PRICE</h3>
    <div style="display: flex; align-items: center; gap: 5px;">
      <div>From</div>
      <input type="number" class="price-input" id="minPrice" name="priceFrom" value="<%= currentFilters.minValue || '' %>">
      <div>To</div>
      <input type="number" class="price-input" id="maxPrice" name="priceTo" value="<%= currentFilters.maxValue || '' %>">
    </div>
    <div class="button-container">
      <button class="clear-button" id="clearSort">CLEAR ALL</button>
      <button class="show-button" id="applySort">SHOW PRODUCTS</button>
    </div>
  </div>
  <div class="hero">
    <div class="hero-image">
      <img src="/img/image13.png" alt="banner_image">
    </div>
  </div>
  <div class="main-content">
    <h2 class="section-title">Exclusive To You</h2>
    <div class="celebrity-products">
      <% if (products && products.length > 0) { %>
        <% products.forEach(product => { %>
          <% if (product.status === 'listed') { %>
            <div class="product-card">
              <button class="wishlist-btn" onclick="toggleWishlist('<%= product.id %>', this)">
                <i class="<%= wishlistProductIds.includes(product.id.toString()) ? 'fa-solid fa-heart' : 'fa-regular fa-heart' %>" style="<%= wishlistProductIds.includes(product.id.toString()) ? 'color: red;' : '' %>"></i>
              </button>
              <div class="product-image">
                <a href="/productViewPage?id=<%= product.id %>">
                  <img src="<%= product.image || '/img/placeholder.png' %>" alt="<%= product.name || 'Product Image' %>">
                </a>
              </div>
              <div class="product-info">
                <h3 class="product-title"><%= product.name || 'Unnamed Product' %></h3>
                <p class="product-price">₹<%= product.price || 'N/A' %></p>
                <button onclick="addToCart('<%= product.id %>')" class="add-to-cart">ADD TO BAG</button>
              </div>
            </div>
          <% } %>
        <% }) %>
      <% } else { %>
        <div class="no-products">
          <h3>No products found</h3>
          <p>Try adjusting your filters or check back later.</p>
        </div>
      <% } %>
    </div>
  </div>
  <%- include("../../views/partials/user/footer") %>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
 <script>
    async function fetchProducts() {
      const brands = Array.from(document.querySelectorAll('#filterModal input[name="brandf"]:checked'))
        .map(input => input.value);
      const categories = Array.from(document.querySelectorAll('#filterModal input[name="categoryf"]:checked'))
        .map(input => input.value);
      let priceFrom = document.querySelector('#sortModal input[name="priceFrom"]').value;
      let priceTo = document.querySelector('#sortModal input[name="priceTo"]').value;
      const sortOption = document.querySelector('#sortModal input[name="sort"]:checked').value;
      priceFrom = priceFrom ? parseFloat(priceFrom) : '';
      priceTo = priceTo ? parseFloat(priceTo) : '';
      if (priceFrom && isNaN(priceFrom)) priceFrom = '';
      if (priceTo && isNaN(priceTo)) priceTo = '';
      const query = new URLSearchParams();
      if (brands.length > 0) query.append('brands', brands.join(','));
      if (categories.length > 0) query.append('category', categories.join(','));
      if (priceFrom !== '') query.append('priceFrom', priceFrom);
      if (priceTo !== '') query.append('priceTo', priceTo);
      if (sortOption) query.append('sort', sortOption);
      window.location.href = `/shop?${query.toString()}`;
    }

    async function toggleWishlist(productId, button) {
      try {
        const icon = button.querySelector('i');
        const isInWishlist = icon.classList.contains('fa-solid');
        button.disabled = true;

        const url = isInWishlist ? `/wishlist/remove/${productId}` : `/wishlist/add/${productId}`;
        const response = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
        });

        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const result = await response.json();

        if (result.success) {
          if (isInWishlist) {
            icon.classList.remove('fa-solid', 'fa-heart');
            icon.classList.add('fa-regular', 'fa-heart');
            icon.style.color = '';
            showToast('Removed from wishlist', 'success');
          } else {
            icon.classList.remove('fa-regular', 'fa-heart');
            icon.classList.add('fa-solid', 'fa-heart');
            icon.style.color = 'red';
            showToast('Added to wishlist', 'success');
          }
        } else {
          if (result.message.includes('log in')) {
            window.location.href = '/login';
          } else {
            showToast(result.message, 'error');
          }
        }
      } catch (error) {
        console.error('Error toggling wishlist:', error);
        showToast('Failed to update wishlist. Please try again.', 'error');
      } finally {
        button.disabled = false;
      }
    }

    function showToast(message, icon = 'success') {
      Swal.fire({
        toast: true,
        position: 'top-end',
        icon: icon,
        title: message,
        showConfirmButton: false,
        timer: 2000,
        timerProgressBar: true,
      });
    }

    async function addToCart(productId) {
      alert('Add to cart functionality not implemented yet.');
    }

    document.querySelector('#applyFilters').addEventListener('click', () => {
      fetchProducts();
      closeModal('#filterModal');
    });
    document.querySelector('#clearFilters').addEventListener('click', () => {
      document.querySelectorAll('#filterModal input[type="checkbox"]').forEach(input => input.checked = false);
      fetchProducts();
    });
    document.querySelector('#applySort').addEventListener('click', () => {
      fetchProducts();
      closeModal('#sortModal');
    });
    document.querySelector('#clearSort').addEventListener('click', () => {
      document.querySelector('#sortModal input[name="sort"][value="A-Z"]').checked = true;
      document.querySelector('#sortModal input[name="priceFrom"]').value = '';
      document.querySelector('#sortModal input[name="priceTo"]').value = '';
      fetchProducts();
    });
    document.querySelector('#filterBtn').addEventListener('click', () => {
      document.querySelector('#filterModal').style.display = 'block';
    });
    document.querySelector('#sortBtn').addEventListener('click', () => {
      document.querySelector('#sortModal').style.display = 'block';
    });
    document.querySelector('#closeFilterBtn').addEventListener('click', () => {
      closeModal('#filterModal');
    });
    document.querySelector('#closeSortBtn').addEventListener('click', () => {
      closeModal('#sortModal');
    });
    document.querySelectorAll('.filter-title').forEach(title => {
      title.addEventListener('click', () => {
        const targetId = title.getAttribute('data-target');
        const target = document.querySelector(`#${targetId}`);
        target.classList.toggle('show');
        const arrow = title.querySelector('.arrow-icon');
        arrow.classList.toggle('rotate');
      });
    });

    function closeModal(modalId) {
      document.querySelector(modalId).style.display = 'none';
    }
    async function addToCart(productId) {
  try {
    const response = await fetch(`/api/product/${productId}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'same-origin',
    });

    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
    const product = await response.json();

    if (!product.variants || product.variants.length === 0) {
      showToast('No variants available for this product.', 'error');
      return;
    }
    const defaultVariant = product.variants.find(v => v.quantity > 0);
    if (!defaultVariant) {
      showToast('Product is out of stock.', 'error');
      return;
    }

    const addToCartResponse = await fetch('/cart/add', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ productId, variantId: defaultVariant._id }),
      credentials: 'same-origin',
    });

    const result = await addToCartResponse.json();

    if (result.success) {
      showToast('Product added to cart!', 'success');
      window.location.href = '/cart';
    } else {
      if (result.message.includes('log in')) {
        window.location.href = '/login';
      } else {
        showToast(result.message, 'error');
      }
    }
  } catch (error) {
    console.error('Error adding to cart:', error);
    showToast('Failed to add to cart. Please try again.', 'error');
  }
}
</script>

</body>
</html>