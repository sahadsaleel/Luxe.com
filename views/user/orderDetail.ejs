<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luxe.com - Order Details</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="/css/userProfile.css">
    <link rel="stylesheet" href="/css/orderDetail.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
       
    </style>
</head>
<body>
    <%- include('../../views/partials/user/header') %>

    <div class="container">
        <div class="header">
            <div class="logo">Luxe.com</div>
        </div>

        <div class="breadcrumb-container">
            <div class="container">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/orders">My Orders</a></li>
                    <li class="breadcrumb-item active">Order Details</li>
                </ol>
            </div>
        </div>

        <div class="main-content">
            <div class="sidebar">
                <div class="profile-brief">
                    <div class="profile-image">
                        <img src="<%= user && user.profileImage ? user.profileImage : '/img/profile images.png' %>" alt="Profile Image">
                    </div>
                    <div class="profile-info">
                        <div class="profile-name"><%= user && user.firstName && user.lastName ? user.firstName + ' ' + user.lastName : 'Guest' %></div>
                        <div class="profile-email"><%= user && user.email ? user.email : 'N/A' %></div>
                    </div>
                </div>

                <ul class="nav-menu">
                    <h3>Manage My Account</h3>
                    <li><a href="/profile"><i class="fas fa-user"></i> My Profile</a></li>
                    <li><a href="/address"><i class="fas fa-address-book"></i> Address Book</a></li>
                    <h3>Orders & Wishlist</h3>
                    <li><a href="/orders" class="active"><i class="fas fa-box"></i> My Orders</a></li>
                    <li><a href="/wishlist"><i class honom fa-heart"></i> My Wishlist</a></li>
                    <h3>Payments</h3>
                    <li><a href="/wallet"><i class="fas fa-wallet"></i> My Wallet</a></li>
                    <li><a href="/coupons"><i class="fas fa-tag"></i> My Coupons</a></li>
                    <li><a href="/referrals"><i class="fas fa-share-alt"></i> My Referrals</a></li>
                    <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Sign out</a></li>
                </ul>
            </div>

            <div class="content">
                <div class="profile-header">
                    <h1>Order Details</h1>
                </div>

                <div class="card">
                    <% if (!order) { %>
                        <div class="error-message">Order not found.</div>
                    <% } else if (!order.orderedItems || order.orderedItems.length === 0) { %>
                        <div class="error-message">No items found in this order.</div>
                    <% } else { %>
                        <div class="card-header">
                            <i class="fas fa-shopping-bag"></i>
                            <h2>Order #<%= order.orderId %></h2>
                            <span class="status <%= order.status.toLowerCase().replace(' ', '-') %>">
                                <%= order.status.charAt(0).toUpperCase() + order.status.slice(1).toLowerCase() %>
                            </span>
                        </div>

                        <table class="order-items-table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Size</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                    <th>Total</th>
                                    <th>Gift Wrap</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% order.orderedItems.forEach(item => { %>
                                    <tr class="<%= item.isCanceled ? 'item-cancelled' : '' %>" data-item-id="<%= item._id %>">
                                        <td>
                                            <div style="display: flex; align-items: center; gap: 10px;">
                                                <img src="<%= item.productImage || '/img/placeholder.png' %>" alt="<%= item.productName || 'Product' %>" class="product-image">
                                                <span><%= item.productName || 'N/A' %></span>
                                            </div>
                                        </td>
                                        <td><%= item.variant && item.variant.size ? item.variant.size : 'N/A' %></td>
                                        <td><%= item.quantity || 'N/A' %></td>
                                        <td>Rs <%= Number(item.price || 0).toFixed(2) %></td>
                                        <td>Rs <%= Number(item.totalPrice || 0).toFixed(2) %></td>
                                        <td><%= item.isGiftWrapped ? 'Yes' : 'No' %></td>
                                        <td class="item nickname-item-status">
                                            <% if (item.status === 'Cancelled') { %>
                                                Cancelled <%= item.cancelReason ? `(${item.cancelReason})` : '' %>
                                            <% } else if (item.status === 'Return Requested') { %>
                                                Return Requested
                                            <% } else if (item.status === 'Return Approved') { %>
                                                Return Approved
                                            <% } else { %>
                                                Active
                                            <% } %>
                                        </td>
                                        <td>
                                            <% if (['Pending', 'Processing'].includes(order.status) && !item.isCanceled) { %>
                                                <button class="action-button btn-cancel" data-item-id="<%= item._id %>" onclick="showCancelItemModal('<%= item._id %>')">Cancel</button>
                                            <% } else if (item.isCanceled) { %>
                                                <button class="action-button btn-disabled" disabled>Cancelled</button>
                                            <% } else if (order.status === 'Delivered' && !item.returnRequestedOn && !item.status.includes('Return')) { %>
                                                <% const deliveryDate = order.deliveryDate || order.createdOn || order.updatedAt; %>
                                                <% const daysSinceDelivery = Math.floor((new Date() - new Date(deliveryDate)) / (1000 * 60 * 60 * 24)); %>
                                                <% console.log(`Item ${item._id}: daysSinceDelivery=${daysSinceDelivery}, deliveryDate=${deliveryDate}`); %>
                                                <% if (daysSinceDelivery <= 30) { %>
                                                    <button class="action-button btn-return" data-item-id="<%= item._id %>" onclick="showReturnItemModal('<%= item._id %>')">Return</button>
                                                <% } %>
                                            <% } else if (item.status === 'Return Requested') { %>
                                                <button class="action-button btn-disabled" disabled>Return Requested</button>
                                            <% } else if (item.status === 'Return Approved') { %>
                                                <button class="action-button btn-disabled" disabled>Return Approved</button>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>

                        <div class="card">
                            <div class="card-header">
                                <i class="fas fa-info-circle"></i>
                                <h2>Order Information</h2>
                            </div>
                            <div class="order-info-grid">
                                <div class="info-item">
                                    <div class="info-label">Order Date</div>
                                    <div class="info-value">
                                        <%= order.orderDate ? new Date(order.orderDate).toLocaleDateString('en-GB', { 
                                            day: '2-digit', 
                                            month: '2-digit', 
                                            year: 'numeric' 
                                        }) : 'N/A' %>
                                    </div>
                                </div>
                                <div class="info-item">
                                    <div class="info-label">Payment Method</div>
                                    <div class="info-value"><%= order.paymentMethod ? order.paymentMethod.charAt(0).toUpperCase() + order.paymentMethod.slice(1) : 'N/A' %></div>
                                </div>
                                <div class="info-item">
                                    <div class="info-label">Delivery Method</div>
                                    <div class="info-value"><%= order.deliveryMethod ? order.deliveryMethod.charAt(0).toUpperCase() + order.deliveryMethod.slice(1) : 'N/A' %></div>
                                </div>
                                <% if (order.invoiceDate) { %>
                                    <div class="info-item">
                                        <div class="info-label">Invoice Date</div>
                                        <div class="info-value">
                                            <%= new Date(order.invoiceDate).toLocaleDateString('en-GB', { 
                                                day: '2-digit', 
                                                month: '2-digit', 
                                                year: 'numeric' 
                                            }) %>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <i class="fas fa-map-marker-alt"></i>
                                <h2>Shipping Address</h2>
                            </div>
                            <div class="info-item">
                                <div class="info-value">
                                    <% if (order.addressDetails) { %>
                                        <%= order.addressDetails.name || 'N/A' %> 
                                        <%= order.addressDetails.addressType ? `(${order.addressDetails.addressType})` : '' %><br>
                                        <%= order.addressDetails.landMark ? order.addressDetails.landMark + ',' : '' %> 
                                        <%= order.addressDetails.city ? order.addressDetails.city + ',' : '' %> 
                                        <%= order.addressDetails.state ? order.addressDetails.state : '' %> 
                                        <%= order.addressDetails.pincode ? order.addressDetails.pincode : '' %><br>
                                        Phone: <%= order.addressDetails.phone || 'N/A' %> 
                                        <%= order.addressDetails.altPhone ? `, Alt: ${order.addressDetails.altPhone}` : '' %>
                                    <% } else { %>
                                        Address not available
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <i class="fas fa-money-bill-wave"></i>
                                <h2>Pricing Summary</h2>
                            </div>
                            <table class="pricing-table">
                                <tr>
                                    <td>Subtotal</td>
                                    <td id="subtotal">Rs <%= order.totalPrice.toFixed(2) %></td>
                                </tr>
                                <tr>
                                    <td>Gift Wrap Total</td>
                                    <td id="giftWrapTotal">Rs <%= Number(order.orderedItems.reduce((sum, item) => sum + (item.isCanceled ? 0 : (item.isGiftWrapped ? 100 : 0)), 0)).toFixed(2) %></td>
                                </tr>
                                <tr>
                                    <td>Shipping</td>
                                    <td id="shipping">Rs <%= Number(order.shipping || 0).toFixed(2) %></td>
                                </tr>
                                <% if (order.discount > 0) { %>
                                    <tr id="discountRow">
                                        <td>Discount</td>
                                        <td id="discount">-Rs <%= Number(order.discount).toFixed(2) %></td>
                                    </tr>
                                <% } %>
                                <tr>
                                    <td>Final Amount</td>
                                    <td id="finalAmount">Rs <%= order.finalAmount.toFixed(2) %></td>
                                </tr>
                            </table>
                        </div>

                        <div class="action-buttons">
                            <a href="/orders" class="btn btn-back"><i class="fas fa-arrow-left"></i> Back to Orders</a>
                            <button class="btn btn-invoice" onclick="showInvoiceModal()"><i class="fas fa-file-pdf"></i> Download Invoice</button>
                            <% if (['Pending', 'Processing'].includes(order.status)) { %>
                                <button class="btn btn-cancel" onclick="showCancelModal()">Cancel Order</button>
                            <% } else if (order.status === 'Delivered') { %>
                                <% const deliveryDate = order.deliveryDate || order.createdOn || order.updatedAt; %>
                                <% const daysSinceDelivery = Math.floor((new Date() - new Date(deliveryDate)) / (1000 * 60 * 60 * 24)); %>
                                <% if (daysSinceDelivery <= 30 && !order.returnRequestedOn) { %>
                                    <button class="btn btn-cancel" onclick="showReturnModal()">Request Return</button>
                                <% } %>
                            <% } %>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="cancelModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title">Cancel Order</div>
                <button class="close-btn" onclick="closeCancelModal()">×</button>
            </div>
            <div class="modal-body">
                <form id="cancelOrderForm">
                    <p>Are you sure you want to cancel Order #<%= order && order.orderId ? order.orderId : 'N/A' %>? This action cannot be undone.</p>
                    <% if (order && order.orderedItems && order.orderedItems.length > 0) { %>
                        <div class="form-group">
                            <h4>Order Summary</h4>
                            <table class="order-summary-table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Size</th>
                                        <th>Qty</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody id="cancelOrderSummary"></tbody>
                            </table>
                            <p><strong>Total Amount: </strong>Rs <%= Number(order.orderedItems.reduce((sum, item) => sum + (item.isCanceled ? 0 : item.totalPrice), 0)).toFixed(2) %></p>
                        </div>
                    <% } %>
                    <div class="form-group">
                        <label for="cancelOrderReason">Reason for Cancellation</label>
                        <select id="cancelOrderReason" name="reason" required>
                            <option value="">Select a reason</option>
                            <option value="Ordered by mistake">Ordered by mistake</option>
                            <option value="Better price available">Better price available</option>
                            <option value="No longer needed">No longer needed</option>
                            <option value="Expected delivery too long">Expected delivery too long</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="cancelOrderComments">Additional Comments (Optional)</label>
                        <textarea id="cancelOrderComments" name="comments" rows="3" placeholder="Please provide details (optional)"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-back" onclick="closeCancelModal()">Keep Order</button>
                        <button type="submit" class="btn btn-cancel" id="cancelOrderSubmit">Cancel Order</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="cancelItemModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title">Cancel Item</div>
                <button class="close-btn" onclick="closeCancelItemModal()">×</button>
            </div>
            <div class="modal-body">
                <form id="cancelItemForm">
                    <p>Are you sure you want to cancel the following item?</p>
                    <div class="form-group">
                        <h4>Item Summary</h4>
                        <table class="order-summary-table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Size</th>
                                    <th>Qty</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody id="cancelItemSummary"></tbody>
                        </table>
                    </div>
                    <div class="form-group">
                        <label for="cancelReason">Reason for Cancellation</label>
                        <select id="cancelReason" name="reason" required>
                            <option value="">Select a reason</option>
                            <option value="Ordered by mistake">Ordered by mistake</option>
                            <option value="Better price available">Better price available</option>
                            <option value="No longer needed">No longer needed</option>
                            <option value="Expected delivery too long">Expected delivery too long</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="cancelComments">Additional Comments (Optional)</label>
                        <textarea id="cancelComments" name="comments" rows="3" placeholder="Please provide details (optional)"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-back" onclick="closeCancelItemModal()">Keep Item</button>
                        <button type="submit" class="btn btn-cancel" id="cancelItemSubmit">Cancel Item</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="returnModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title">Request Return</div>
                <button class="close-btn" onclick="closeReturnModal()">×</button>
            </div>
            <div class="modal-body">
                <form id="returnOrderForm">
                    <p>Are you sure you want to request a return for Order #<%= order && order.orderId ? order.orderId : 'N/A' %>?</p>
                    <% if (order && order.orderedItems && order.orderedItems.length > 0) { %>
                        <div class="form-group">
                            <h4>Order Summary</h4>
                            <table class="order-summary-table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Size</th>
                                        <th>Qty</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody id="returnOrderSummary"></tbody>
                            </table>
                            <p><strong>Total Amount: </strong>Rs <%= Number(order.orderedItems.reduce((sum, item) => sum + (item.isCanceled ? 0 : item.totalPrice), 0)).toFixed(2) %></p>
                        </div>
                    <% } %>
                    <div class="form-group">
                        <label for="returnReason">Reason for Return</label>
                        <select id="returnReason" name="reason" required>
                            <option value="">Select a reason</option>
                            <option value="Defective product">Defective product</option>
                            <option value="Wrong item received">Wrong item received</option>
                            <option value="Not as described">Not as described</option>
                            <option value="Changed mind">Changed mind</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="returnComments">Additional Comments (Optional)</label>
                        <textarea id="returnComments" name="comments" rows="3" placeholder="Please provide details (optional)"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-back" onclick="closeReturnModal()">Cancel</button>
                        <button type="submit" class="btn btn-cancel" id="returnOrderSubmit">Request Return</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="invoiceModal">
        <div class="modal invoice-modal">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title">
                        <i class="fas fa-file-invoice"></i>
                        Invoice Preview
                    </div>
                    <button class="close-btn" onclick="closeInvoiceModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="invoiceContent" class="invoice-preview">
                        <div class="invoice-header">
                            <div class="invoice-title">
                                <div class="invoice-logo">
                                    <span class="logo-text">LUXE</span>
                                    <span class="logo-subtitle">Luxury perfume Store</span>
                                </div>
                                <div class="invoice-label">INVOICE</div>
                            </div>
                            <div id="modalStatus" class="status"></div>
                            <div class="invoice-details">
                                <div class="invoice-detail-col">
                                    <div class="detail-group">
                                        <div class="invoice-detail-label">Order ID</div>
                                        <div id="modalOrderId" class="invoice-detail-value"></div>
                                    </div>
                                    <div class="detail-group">
                                        <div class="invoice-detail-label">Order Date</div>
                                        <div id="modalOrderDate" class="invoice-detail-value"></div>
                                    </div>
                                    <div id="modalInvoiceDateContainer" class="detail-group">
                                        <div class="invoice-detail-label">Invoice Date</div>
                                        <div id="modalInvoiceDate" class="invoice-detail-value"></div>
                                    </div>
                                </div>
                                <div class="invoice-detail-col">
                                    <div class="detail-group">
                                        <div class="invoice-detail-label">Payment Method</div>
                                        <div id="modalPaymentMethod" class="invoice-detail-value"></div>
                                    </div>
                                    <div class="detail-group">
                                        <div class="invoice-detail-label">Delivery Method</div>
                                        <div id="modalDeliveryMethod" class="invoice-detail-value"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="invoice-body">
                            <div class="invoice-section">
                                <div class="invoice-section-title">
                                    <i class="fas fa-shipping-fast"></i>
                                    Shipping Information
                                </div>
                                <div class="invoice-address">
                                    <div class="invoice-address-box">
                                        <div id="modalAddress"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="invoice-section">
                                <div class="invoice-section-title">
                                    <i class="fas fa-shopping-cart"></i>
                                    Order Summary
                                </div>
                                <div class="table-responsive">
                                    <table class="invoice-table">
                                        <thead>
                                            <tr>
                                                <th>Product</th>
                                                <th>Size</th>
                                                <th>Quantity</th>
                                                <th>Price</th>
                                                <th>Total</th>
                                                <th>Gift Wrap</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody id="modalItems"></tbody>
                                    </table>
                                </div>
                                <div class="invoice-total-section">
                                    <table class="invoice-total-table">
                                        <tr>
                                            <td>Subtotal</td>
                                            <td id="modalSubtotal"></td>
                                        </tr>
                                        <tr>
                                            <td>Gift Wrap</td>
                                            <td id="modalGiftWrapTotal"></td>
                                        </tr>
                                        <tr>
                                            <td>Shipping</td>
                                            <td id="modalShipping"></td>
                                        </tr>
                                        <tr id="modalDiscountRow">
                                            <td>Discount</td>
                                            <td id="modalDiscount"></td>
                                        </tr>
                                        <tr class="total-row">
                                            <td>Grand Total</td>
                                            <td id="modalFinalAmount"></td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="invoice-footer">
                            <div class="invoice-note">
                                <i class="fas fa-info-circle"></i>
                                Thank you for shopping with Luxe! For any questions regarding your order, please contact our customer support.
                            </div>
                            <div class="copyright">© 2025 Luxe. All rights reserved.</div>
                        </div>
                    </div>
                    <div class="invoice-download-area">
                        <button class="btn btn-invoice" onclick="downloadInvoice()">
                            <i class="fas fa-file-pdf"></i>
                            Download Invoice PDF
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="returnItemModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title">Return Item</div>
                <button class="close-btn" onclick="closeReturnItemModal()">×</button>
            </div>
            <div class="modal-body">
                <form id="returnItemForm">
                    <p>Are you sure you want to return this item?</p>
                    <div class="form-group">
                        <h4>Item Summary</h4>
                        <table class="order-summary-table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Size</th>
                                    <th>Qty</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody id="returnItemSummary"></tbody>
                        </table>
                    </div>
                    <div class="form-group">
                        <label for="returnItemReason">Reason for Return</label>
                        <select id="returnItemReason" name="reason" required>
                            <option value="">Select a reason</option>
                            <option value="Defective product">Defective product</option>
                            <option value="Wrong item received">Wrong item received</option>
                            <option value="Not as described">Not as described</option>
                            <option value="Changed mind">Changed mind</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="returnItemComments">Additional Comments (Optional)</label>
                        <textarea id="returnItemComments" name="comments" rows="3" placeholder="Please provide details (optional)"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-back" onclick="closeReturnItemModal()">Cancel</button>
                        <button type="submit" class="btn btn-return" id="returnItemSubmit">Request Return</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <%- include('../../views/partials/user/footer') %>

<script>
    const orderData = {
        orderId: '<%= order && order.orderId ? order.orderId : "N/A" %>',
        orderDate: '<%= order && order.orderDate ? new Date(order.orderDate).toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" }) : "N/A" %>',
        invoiceDate: '<%= order && order.invoiceDate ? new Date(order.invoiceDate).toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" }) : "N/A" %>',
        status: '<%= order && order.status ? order.status.charAt(0).toUpperCase() + order.status.slice(1).toLowerCase() : "N/A" %>',
        paymentMethod: '<%= order && order.paymentMethod ? order.paymentMethod.charAt(0).toUpperCase() + order.paymentMethod.slice(1) : "N/A" %>',
        deliveryMethod: '<%= order && order.deliveryMethod ? order.deliveryMethod.charAt(0).toUpperCase() + order.deliveryMethod.slice(1) : "N/A" %>',
        address: '<%= order && order.addressDetails && order.addressDetails.name ? order.addressDetails.name + " (" + (order.addressDetails.addressType || "") + "), " + (order.addressDetails.landMark || "") + ", " + (order.addressDetails.city || "") + ", " + (order.addressDetails.state || "") + " " + (order.addressDetails.pincode || "") + ", Phone: " + (order.addressDetails.phone || "N/A") + (order.addressDetails.altPhone ? ", Alt: " + order.addressDetails.altPhone : "") : "N/A" %>',
        totalPrice: '<%= order && order.orderedItems ? Number(order.orderedItems.reduce((sum, item) => sum + (item.status === "Cancelled" ? 0 : item.totalPrice), 0)).toFixed(2) : "0.00" %>',
        giftWrapTotal: '<%= order && order.orderedItems ? Number(order.orderedItems.reduce((sum, item) => sum + (item.status === "Cancelled" ? 0 : (item.isGiftWrapped ? 100 : 0)), 0)).toFixed(2) : "0.00" %>',
        shipping: '<%= order && order.shipping ? Number(order.shipping).toFixed(2) : "0.00" %>',
        discount: '<%= order && order.discount ? Number(order.discount).toFixed(2) : "0.00" %>',
        finalAmount: '<%= order && order.orderedItems ? Number(order.orderedItems.reduce((sum, item) => sum + (item.status === "Cancelled" ? 0 : item.totalPrice), 0) + (order.shipping || 0) - (order.discount || 0)).toFixed(2) : "0.00" %>',
        items: [
            <% if (order && order.orderedItems && order.orderedItems.length > 0) { %>
                <% order.orderedItems.forEach((item, index) => { %>
                    {
                        itemId: '<%= item._id %>',
                        productName: '<%= item.productName || "N/A" %>',
                        size: '<%= item.variant && item.variant.size ? item.variant.size : "N/A" %>',
                        quantity: '<%= item.quantity || "N/A" %>',
                        price: '<%= Number(item.price || 0).toFixed(2) %>',
                        totalPrice: '<%= Number(item.totalPrice || 0).toFixed(2) %>',
                        isGiftWrapped: '<%= item.isGiftWrapped ? "Yes" : "No" %>',
                        status: '<%= item.status || "Active" %>',
                        cancelReason: '<%= item.cancelReason || "" %>',
                        returnReason: '<%= item.returnReason || "" %>',
                        productImage: '<%= item.productImage || "/img/placeholder.png" %>'
                    }<%= index < order.orderedItems.length - 1 ? ',' : '' %>
                <% }); %>
            <% } %>
        ]
    };

    function showToast(message, type = 'success') {
        Toastify({
            text: message,
            duration: 3000,
            gravity: 'top',
            position: 'right',
            backgroundColor: type === 'success' ? '#28a745' : '#dc3545',
            stopOnFocus: true,
        }).showToast();
    }

    function showCancelModal() {
        if (!orderData.items || orderData.items.length === 0) {
            showToast('No items available to cancel.', 'error');
            return;
        }
        const summaryTable = document.getElementById('cancelOrderSummary');
        summaryTable.innerHTML = '';
        orderData.items.forEach(item => {
            if (item.status !== 'Cancelled') {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.productName}</td>
                    <td>${item.size}</td>
                    <td>${item.quantity}</td>
                    <td>Rs ${item.totalPrice}</td>
                `;
                summaryTable.appendChild(row);
            }
        });
        document.getElementById('cancelModal').classList.add('active');
    }

    function closeCancelModal() {
        document.getElementById('cancelModal').classList.remove('active');
        document.getElementById('cancelOrderReason').value = '';
        document.getElementById('cancelOrderComments').value = '';
        const submitBtn = document.getElementById('cancelOrderSubmit');
        submitBtn.innerHTML = 'Cancel Order';
        submitBtn.classList.remove('btn-loading');
        submitBtn.disabled = false;
    }

    let currentItemId = null;

    function showCancelItemModal(itemId) {
        const item = orderData.items.find(i => i.itemId === itemId);
        if (!item) {
            showToast('Item not found.', 'error');
            return;
        }
        if (item.status === 'Cancelled') {
            showToast('This item is already cancelled.', 'error');
            return;
        }
        currentItemId = itemId;
        const summaryTable = document.getElementById('cancelItemSummary');
        summaryTable.innerHTML = `
            <tr>
                <td>${item.productName}</td>
                <td>${item.size}</td>
                <td>${item.quantity}</td>
                <td>Rs ${item.totalPrice}</td>
            </tr>
        `;
        document.getElementById('cancelItemModal').classList.add('active');
    }

    function closeCancelItemModal() {
        document.getElementById('cancelItemModal').classList.remove('active');
        currentItemId = null;
        document.getElementById('cancelReason').value = '';
        document.getElementById('cancelComments').value = '';
        const submitBtn = document.getElementById('cancelItemSubmit');
        submitBtn.innerHTML = 'Cancel Item';
        submitBtn.classList.remove('btn-loading');
        submitBtn.disabled = false;
    }

    function showReturnModal() {
        if (!orderData.items || orderData.items.length === 0) {
            showToast('No items available to return.', 'error');
            return;
        }
        const summaryTable = document.getElementById('returnOrderSummary');
        summaryTable.innerHTML = '';
        orderData.items.forEach(item => {
            if (item.status !== 'Cancelled') {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.productName}</td>
                    <td>${item.size}</td>
                    <td>${item.quantity}</td>
                    <td>Rs ${item.totalPrice}</td>
                `;
                summaryTable.appendChild(row);
            }
        });
        document.getElementById('returnModal').classList.add('active');
    }

    function closeReturnModal() {
        document.getElementById('returnModal').classList.remove('active');
        document.getElementById('returnReason').value = '';
        document.getElementById('returnComments').value = '';
        const submitBtn = document.getElementById('returnOrderSubmit');
        submitBtn.innerHTML = 'Request Return';
        submitBtn.classList.remove('btn-loading');
        submitBtn.disabled = false;
    }

    document.getElementById('cancelOrderForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const reason = document.getElementById('cancelOrderReason').value;
        const comments = document.getElementById('cancelOrderComments').value;
        const submitBtn = document.getElementById('cancelOrderSubmit');

        if (!reason) {
            showToast('Please select a cancellation reason.', 'error');
            return;
        }

        submitBtn.innerHTML = '<span class="spinner"></span> Cancelling...';
        submitBtn.classList.add('btn-loading');
        submitBtn.disabled = true;

        try {
            const response = await fetch(`/orders/details/${orderData.orderId}/cancel`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason, comments })
            });
            const result = await response.json();
            if (result.success) {
                showToast('Order cancelled successfully!');
                orderData.status = 'Cancelled';
                orderData.totalPrice = '0.00';
                orderData.giftWrapTotal = '0.00';
                orderData.finalAmount = '0.00';
                orderData.discount = '0.00';
                const statusElement = document.querySelector('.status');
                if (statusElement) {
                    statusElement.textContent = 'Cancelled';
                    statusElement.className = 'status cancelled';
                }
                const cancelButton = document.querySelector('.btn-cancel[onclick="showCancelModal()"]');
                if (cancelButton) {
                    cancelButton.style.display = 'none';
                }
                orderData.items.forEach(item => {
                    item.status = 'Cancelled';
                    item.cancelReason = reason;
                    item.totalPrice = '0.00';
                });
                document.querySelectorAll('.order-items-table tbody tr').forEach(row => {
                    row.classList.add('item-cancelled');
                    const statusCell = row.querySelector('.item-status');
                    statusCell.textContent = `Cancelled (${reason})`;
                    const actionCell = row.querySelector('td:last-child');
                    actionCell.innerHTML = `<button class="action-button btn-disabled" disabled>Cancelled</button>`;
                });
                document.getElementById('subtotal').textContent = 'Rs 0.00';
                document.getElementById('giftWrapTotal').textContent = 'Rs 0.00';
                document.getElementById('finalAmount').textContent = 'Rs 0.00';
                const discountRow = document.getElementById('discountRow');
                if (discountRow) {
                    discountRow.style.display = 'none';
                }
                closeCancelModal();
            } else {
                showToast(result.message || 'Failed to cancel order.', 'error');
            }
        } catch (error) {
            showToast('An error occurred while cancelling the order.', 'error');
        }
        submitBtn.innerHTML = 'Cancel Order';
        submitBtn.classList.remove('btn-loading');
        submitBtn.disabled = false;
    });

    document.getElementById('cancelItemForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const submitBtn = document.getElementById('cancelItemSubmit');
        if (submitBtn.dataset.submitting === 'true') {
            console.log('Cancel item submission already in progress, ignoring duplicate submission');
            return;
        }

        if (!currentItemId) {
            showToast('No item selected to cancel.', 'error');
            return;
        }

        const item = orderData.items.find(i => i.itemId === currentItemId);
        if (!item) {
            showToast('Item not found.', 'error');
            closeCancelItemModal();
            return;
        }
        if (item.status === 'Cancelled') {
            showToast('This item is already cancelled.', 'error');
            closeCancelItemModal();
            return;
        }

        const reason = document.getElementById('cancelReason')?.value;
        const comments = document.getElementById('cancelComments')?.value;

        if (!reason) {
            showToast('Please select a cancellation reason.', 'error');
            return;
        }

        submitBtn.dataset.submitting = 'true';
        submitBtn.innerHTML = '<span class="spinner"></span> Cancelling...';
        submitBtn.classList.add('btn-loading');
        submitBtn.disabled = true;

        try {
            console.log(`Sending cancel item request for order: ${orderData.orderId}, item: ${currentItemId}`);
            const response = await fetch(`/orders/details/${orderData.orderId}/cancel-item/${currentItemId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason, comments })
            });

            console.log('Response status:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.log('Response error text:', errorText);
                throw new Error(`Server responded with status ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('Parsed response:', result);

            if (result.success) {
                console.log('Item cancellation successful');
                showToast('Item cancelled successfully!', 'success');

                const itemRow = document.querySelector(`tr[data-item-id="${currentItemId}"]`);
                if (itemRow) {
                    itemRow.classList.add('item-cancelled');
                    const statusCell = itemRow.querySelector('.item-status');
                    if (statusCell) statusCell.textContent = `Cancelled (${reason})`;
                    const totalCell = itemRow.querySelector('td:nth-child(5)');
                    if (totalCell) totalCell.textContent = 'Rs 0.00';
                    const actionCell = itemRow.querySelector('td:last-child');
                    if (actionCell) {
                        actionCell.innerHTML = `<button class="action-button btn-disabled" disabled>Cancelled</button>`;
                    }
                }
                if (item) {
                    item.status = 'Cancelled';
                    item.cancelReason = reason;
                    item.totalPrice = '0.00';
                }

                orderData.totalPrice = result.order.totalPrice;
                orderData.giftWrapTotal = result.order.giftWrapTotal;
                orderData.finalAmount = result.order.finalAmount;
                orderData.discount = result.order.discount;

                document.getElementById('subtotal').textContent = `Rs ${result.order.totalPrice}`;
                document.getElementById('giftWrapTotal').textContent = `Rs ${result.order.giftWrapTotal}`;
                document.getElementById('finalAmount').textContent = `Rs ${result.order.finalAmount}`;

                const discountRow = document.getElementById('discountRow');
                if (discountRow) {
                    const discountElement = document.getElementById('discount');
                    if (parseFloat(result.order.discount) > 0 && discountElement) {
                        discountElement.textContent = `-Rs ${result.order.discount}`;
                        discountRow.style.display = 'table-row';
                    } else {
                        discountRow.style.display = 'none';
                    }
                }

                if (result.allCancelled) {
                    orderData.status = 'Cancelled';
                    const statusElement = document.querySelector('.status');
                    if (statusElement) {
                        statusElement.textContent = 'Cancelled';
                        statusElement.className = 'status cancelled';
                    }
                    const cancelOrderButton = document.querySelector('.btn-cancel[onclick="showCancelModal()"]');
                    if (cancelOrderButton) {
                        cancelOrderButton.style.display = 'none';
                    }
                }

                closeCancelItemModal();
            } else {
                console.log('Server returned success: false', result.message);
                showToast(result.message || 'Failed to cancel item.', 'error');
            }
        } catch (error) {
            console.error('Error during item cancellation:', error.message);
            showToast(`An error occurred: ${error.message || 'Please try again.'}`, 'error');
        } finally {
            submitBtn.dataset.submitting = 'false';
            submitBtn.innerHTML = 'Cancel Item';
            submitBtn.classList.remove('btn-loading');
            submitBtn.disabled = false;
        }
    });

    document.getElementById('returnOrderForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const reason = document.getElementById('returnReason')?.value;
        const comments = document.getElementById('returnComments')?.value;
        const submitBtn = document.getElementById('returnOrderSubmit');

        if (!reason) {
            showToast('Please select a return reason.', 'error');
            return;
        }

        if (submitBtn.disabled) {
            return;
        }

        submitBtn.innerHTML = '<span class="spinner"></span> Requesting...';
        submitBtn.classList.add('btn-loading');
        submitBtn.disabled = true;

        try {
            const response = await fetch(`/orders/details/${orderData.orderId}/return`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason, comments })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
                showToast('Return request submitted successfully!', 'success');
                orderData.status = 'Return Requested';

                const statusElement = document.querySelector('.status');
                if (statusElement) {
                    statusElement.textContent = 'Return Requested';
                    statusElement.className = 'status return-requested';
                }

                const returnButton = document.querySelector('.btn-cancel[onclick="showReturnModal()"]');
                if (returnButton) {
                    returnButton.style.display = 'none';
                }

                closeReturnModal();
            } else {
                showToast(result.message || 'Failed to submit return request.', 'error');
            }
        } catch (error) {
            console.error('Error submitting return request:', error);
            showToast(`An error occurred: ${error.message || 'Please try again.'}`, 'error');
        } finally {
            submitBtn.innerHTML = 'Request Return';
            submitBtn.classList.remove('btn-loading');
            submitBtn.disabled = false;
        }
    });

    function formatCurrency(amount) {
        return `Rs ${Number(amount).toFixed(2)}`;
    }

    function showInvoiceModal() {
        try {
            if (!orderData.items || orderData.items.length === 0) {
                showToast('No items available for invoice.', 'error');
                return;
            }
            document.getElementById('modalOrderId').textContent = orderData.orderId;
            document.getElementById('modalOrderDate').textContent = orderData.orderDate;
            const invoiceDateContainer = document.getElementById('modalInvoiceDateContainer');
            if (orderData.invoiceDate && orderData.invoiceDate !== 'N/A') {
                invoiceDateContainer.style.display = 'block';
                document.getElementById('modalInvoiceDate').textContent = orderData.invoiceDate;
            } else {
                invoiceDateContainer.style.display = 'none';
            }
            document.getElementById('modalStatus').textContent = orderData.status;
            document.getElementById('modalStatus').className = `status ${orderData.status.toLowerCase().replace(' ', '-')}`;
            document.getElementById('modalPaymentMethod').textContent = orderData.paymentMethod;
            document.getElementById('modalDeliveryMethod').textContent = orderData.deliveryMethod;
            document.getElementById('modalAddress').textContent = orderData.address;

            const itemsTableBody = document.getElementById('modalItems');
            itemsTableBody.innerHTML = '';
            orderData.items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.productName}</td>
                    <td>${item.size}</td>
                    <td>${item.quantity}</td>
                    <td>${item.status === 'Cancelled' ? 'N/A' : formatCurrency(item.price)}</td>
                    <td>${item.status === 'Cancelled' ? 'N/A' : formatCurrency(item.totalPrice)}</td>
                    <td>${item.status === 'Cancelled' ? 'N/A' : item.isGiftWrapped}</td>
                    <td>${item.status === 'Cancelled' ? `Cancelled (${item.cancelReason || 'No reason'})` : item.status}</td>
                `;
                itemsTableBody.appendChild(row);
            });

            document.getElementById('modalSubtotal').textContent = formatCurrency(orderData.totalPrice);
            document.getElementById('modalGiftWrapTotal').textContent = formatCurrency(orderData.giftWrapTotal);
            document.getElementById('modalShipping').textContent = formatCurrency(orderData.shipping);
            
            const modalDiscountRow = document.getElementById('modalDiscountRow');
            if (parseFloat(orderData.discount) > 0) {
                modalDiscountRow.style.display = 'table-row';
                document.getElementById('modalDiscount').textContent = `-${formatCurrency(orderData.discount)}`;
            } else {
                modalDiscountRow.style.display = 'none';
            }
            
            document.getElementById('modalFinalAmount').textContent = formatCurrency(orderData.finalAmount);
            document.getElementById('invoiceModal').classList.add('active');
        } catch (error) {
            console.error('Error generating invoice preview:', error);
            showToast('Error generating invoice.', 'error');
        }
    }

    function closeInvoiceModal() {
        document.getElementById('invoiceModal').classList.remove('active');
    }

    function downloadInvoice() {
        try {
            if (!orderData.items || orderData.items.length === 0) {
                showToast('No items available for invoice.', 'error');
                return;
            }
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            doc.setFontSize(26);
            doc.setFont("helvetica", "bold");
            doc.setTextColor(4, 106, 56);
            doc.text('Luxe Perfumes Store', 20, 20);
            
            doc.setFontSize(14);
            doc.setTextColor(0, 0, 0);
            doc.setFont("helvetica", "normal");
            doc.text('INVOICE', 20, 35);
            
            doc.setFontSize(10);
            doc.text(`Order ID: ${orderData.orderId}`, 20, 45);
            doc.text(`Date: ${orderData.orderDate}`, 20, 50);
            doc.text(`Time: ${new Date().toLocaleTimeString()}`, 20, 55);

            doc.setFontSize(10);
            doc.setTextColor(100, 100, 100);
            const companyInfo = [
                'Luxe Perfumes Store',
                '123 Elegance Avenue',
                'Mumbai, MH 400001, India',
                'Phone: +91 22 1234 5678',
                'Email: support@luxeperfumes.com'
            ];
            let yCompany = 20;
            companyInfo.forEach(line => {
                doc.text(line, 190, yCompany, { align: 'right' });
                yCompany += 5;
            });

            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            doc.setFont("helvetica", "bold");
            doc.text('Shipping Address:', 20, 70);
            doc.setFont("helvetica", "normal");
            doc.setFontSize(10);
            const address = orderData.address.split(', ').filter(line => line && line !== 'N/A');
            let yAddress = 75;
            address.forEach(line => {
                doc.text(line, 20, yAddress);
                yAddress += 5;
            });

            const tableData = orderData.items.map(item => [
                item.productName,
                item.quantity,
                item.status === 'Cancelled' ? 'N/A' : `Rs ${Number(item.price).toFixed(2)}`,
                item.status === 'Cancelled' ? 'N/A' : `Rs ${Number(item.totalPrice).toFixed(2)}`
            ]);

            const additionalRows = [
                ['Subtotal', '', '', `Rs ${Number(orderData.totalPrice).toFixed(2)}`]
            ];
            if (parseFloat(orderData.giftWrapTotal) > 0) {
                additionalRows.push(['Gift Wrap Charges', '', '', `Rs ${Number(orderData.giftWrapTotal).toFixed(2)}`]);
            }
            if (parseFloat(orderData.shipping) > 0) {
                additionalRows.push(['Shipping', '', '', `Rs ${Number(orderData.shipping).toFixed(2)}`]);
            }
            if (parseFloat(orderData.discount) > 0) {
                additionalRows.push(['Discount', '', '', `-Rs ${Number(orderData.discount).toFixed(2)}`]);
            }
            additionalRows.push(['Total Amount', '', '', `Rs ${Number(orderData.finalAmount).toFixed(2)}`]);

            doc.autoTable({
                startY: yAddress + 10,
                head: [['Item', 'Quantity', 'Price', 'Total']],
                body: [...tableData, ...additionalRows],
                theme: 'grid',
                styles: { fontSize: 8, cellPadding: 3, textColor: [0, 0, 0], font: "helvetica" },
                headStyles: { fillColor: [4, 106, 56], textColor: [255, 255, 255], fontStyle: 'bold' },
                columnStyles: {
                    0: { cellWidth: 80 },
                    1: { cellWidth: 30, halign: 'center' },
                    2: { cellWidth: 30, halign: 'right' },
                    3: { cellWidth: 30, halign: 'right' }
                },
                margin: { left: 20, right: 20 }
            });

            const finalY = doc.lastAutoTable.finalY + 10;
            doc.setFontSize(8);
            doc.setTextColor(100, 100, 100);
            doc.setFont("helvetica", "normal");
            doc.text('Thank you for your purchase!', 20, finalY);
            doc.text('For any concerns, contact us at support@luxeperfumes.com or +91 22 1234 5678', 20, finalY + 5);
            doc.text('Terms: Payment due upon receipt. All sales are final.', 20, finalY + 15);

            doc.save(`invoice-${orderData.orderId}.pdf`);
            showToast('Invoice downloaded successfully!');
        } catch (error) {
            console.error('Error generating invoice:', error);
            showToast('Failed to download invoice.', 'error');
        }
    }

    let currentReturnItemId = null;

    function showReturnItemModal(itemId) {
        const item = orderData.items.find(i => i.itemId === itemId);
        if (!item) {
            showToast('Item not found.', 'error');
            return;
        }
        if (item.status.includes('Return')) {
            showToast('Return already requested for this item.', 'error');
            return;
        }
        currentReturnItemId = itemId;
        const summaryTable = document.getElementById('returnItemSummary');
        summaryTable.innerHTML = `
            <tr>
                <td>${item.productName}</td>
                <td>${item.size}</td>
                <td>${item.quantity}</td>
                <td>₹${item.totalPrice}</td>
            </tr>
        `;
        document.getElementById('returnItemModal').classList.add('active');
    }

    function closeReturnItemModal() {
        document.getElementById('returnItemModal').classList.remove('active');
        currentReturnItemId = null;
        document.getElementById('returnItemReason').value = '';
        document.getElementById('returnItemComments').value = '';
        const submitBtn = document.getElementById('returnItemSubmit');
        submitBtn.innerHTML = 'Request Return';
        submitBtn.classList.remove('btn-loading');
        submitBtn.disabled = false;
    }

    document.getElementById('returnItemForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const submitBtn = document.getElementById('returnItemSubmit');
        if (submitBtn.dataset.submitting === 'true') {
            console.log('Return item submission already in progress');
            return;
        }

        if (!currentReturnItemId) {
            showToast('No item selected for return.', 'error');
            return;
        }

        const reason = document.getElementById('returnItemReason').value;
        const comments = document.getElementById('returnItemComments').value;

        if (!reason) {
            showToast('Please select a return reason.', 'error');
            return;
        }

        submitBtn.dataset.submitting = 'true';
        submitBtn.innerHTML = '<span class="spinner"></span> Processing...';
        submitBtn.classList.add('btn-loading');
        submitBtn.disabled = true;

        try {
            console.log(`Submitting return request for order: ${orderData.orderId}, item: ${currentReturnItemId}`);
            const response = await fetch(`/orders/details/${orderData.orderId}/request-return/${currentReturnItemId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason, comments })
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', [...response.headers.entries()]);

            if (!response.ok) {
                const errorText = await response.text();
                console.log('Error response:', errorText);
                throw new Error(`HTTP error! Status: ${response.status}, Body: ${errorText}`);
            }

            const result = await response.json();
            console.log('Parsed response:', result);

            if (result.success) {
                showToast('Return request submitted successfully!', 'success');

                const itemRow = document.querySelector(`tr[data-item-id="${currentReturnItemId}"]`);
                if (itemRow) {
                    const statusCell = itemRow.querySelector('.nickname-item-status');
                    if (statusCell) statusCell.textContent = 'Return Requested';
                    const actionCell = itemRow.querySelector('td:last-child');
                    if (actionCell) {
                        actionCell.innerHTML = '<button class="action-button btn-disabled" disabled>Return Requested</button>';
                    }
                }

                const item = orderData.items.find(i => i.itemId === currentReturnItemId);
                if (item) {
                    item.status = 'Return Requested';
                    item.returnReason = reason;
                    item.totalPrice = '0.00';
                }

                if (result.order) {
                    orderData.totalPrice = Number(result.order.totalPrice).toFixed(2);
                    orderData.giftWrapTotal = Number(result.order.giftWrapTotal).toFixed(2);
                    orderData.finalAmount = Number(result.order.finalAmount).toFixed(2);
                    orderData.discount = Number(result.order.discount || 0).toFixed(2);

                    document.getElementById('subtotal').textContent = `₹${orderData.totalPrice}`;
                    document.getElementById('giftWrapTotal').textContent = `₹${orderData.giftWrapTotal}`;
                    document.getElementById('finalAmount').textContent = `₹${orderData.finalAmount}`;

                    const discountRow = document.getElementById('discountRow');
                    if (discountRow) {
                        if (parseFloat(orderData.discount) > 0) {
                            document.getElementById('discount').textContent = `-₹${orderData.discount}`;
                            discountRow.style.display = 'table-row';
                        } else {
                            discountRow.style.display = 'none';
                        }
                    }
                }

                if (result.allReturned) {
                    orderData.status = 'Return Requested';
                    const statusElement = document.querySelector('.status');
                    if (statusElement) {
                        statusElement.textContent = 'Return Requested';
                        statusElement.className = 'status return-requested';
                    }
                }

                closeReturnItemModal();
            } else {
                showToast(result.message || 'Failed to submit return request.', 'error');
            }
        } catch (error) {
            console.error('Error submitting return request:', error.message, error.stack);
            showToast(`Error: ${error.message || 'Failed to process return request.'}`, 'error');
        } finally {
            submitBtn.dataset.submitting = 'false';
            submitBtn.innerHTML = 'Request Return';
            submitBtn.classList.remove('btn-loading');
            submitBtn.disabled = false;
        }
    });
</script>
</body>
</html>